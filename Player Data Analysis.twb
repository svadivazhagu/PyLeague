<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20183.18.1219.1533                               -->
<workbook original-version='18.1' source-build='2018.3.2 (20183.18.1219.1533)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='partFrame' inline='true' name='federated.10373q2145vnmg1cax36k12suecu' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='partFrame' name='textscan.14hme2303ug4st13ncwij0q7r62t'>
            <connection class='textscan' directory='C:/R/PyLeague' filename='partFrame.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.14hme2303ug4st13ncwij0q7r62t' name='partFrame.csv' table='[partFrame#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='integer' name='timestamp' ordinal='0' />
            <column datatype='integer' name='currentGold' ordinal='1' />
            <column datatype='real' name='dominionScore' ordinal='2' />
            <column datatype='integer' name='jungleMinionsKilled' ordinal='3' />
            <column datatype='integer' name='level' ordinal='4' />
            <column datatype='integer' name='minionsKilled' ordinal='5' />
            <column datatype='integer' name='participantId' ordinal='6' />
            <column datatype='real' name='teamScore' ordinal='7' />
            <column datatype='integer' name='totalGold' ordinal='8' />
            <column datatype='real' name='x' ordinal='9' />
            <column datatype='integer' name='xp' ordinal='10' />
            <column datatype='real' name='y' ordinal='11' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[partFrame.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timestamp</remote-name>
            <remote-type>20</remote-type>
            <local-name>[timestamp]</local-name>
            <parent-name>[partFrame.csv]</parent-name>
            <remote-alias>timestamp</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>currentGold</remote-name>
            <remote-type>20</remote-type>
            <local-name>[currentGold]</local-name>
            <parent-name>[partFrame.csv]</parent-name>
            <remote-alias>currentGold</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>dominionScore</remote-name>
            <remote-type>5</remote-type>
            <local-name>[dominionScore]</local-name>
            <parent-name>[partFrame.csv]</parent-name>
            <remote-alias>dominionScore</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>jungleMinionsKilled</remote-name>
            <remote-type>20</remote-type>
            <local-name>[jungleMinionsKilled]</local-name>
            <parent-name>[partFrame.csv]</parent-name>
            <remote-alias>jungleMinionsKilled</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>level</remote-name>
            <remote-type>20</remote-type>
            <local-name>[level]</local-name>
            <parent-name>[partFrame.csv]</parent-name>
            <remote-alias>level</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>minionsKilled</remote-name>
            <remote-type>20</remote-type>
            <local-name>[minionsKilled]</local-name>
            <parent-name>[partFrame.csv]</parent-name>
            <remote-alias>minionsKilled</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participantId</remote-name>
            <remote-type>20</remote-type>
            <local-name>[participantId]</local-name>
            <parent-name>[partFrame.csv]</parent-name>
            <remote-alias>participantId</remote-alias>
            <ordinal>6</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>teamScore</remote-name>
            <remote-type>5</remote-type>
            <local-name>[teamScore]</local-name>
            <parent-name>[partFrame.csv]</parent-name>
            <remote-alias>teamScore</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>totalGold</remote-name>
            <remote-type>20</remote-type>
            <local-name>[totalGold]</local-name>
            <parent-name>[partFrame.csv]</parent-name>
            <remote-alias>totalGold</remote-alias>
            <ordinal>8</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>x</remote-name>
            <remote-type>5</remote-type>
            <local-name>[x]</local-name>
            <parent-name>[partFrame.csv]</parent-name>
            <remote-alias>x</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>xp</remote-name>
            <remote-type>20</remote-type>
            <local-name>[xp]</local-name>
            <parent-name>[partFrame.csv]</parent-name>
            <remote-alias>xp</remote-alias>
            <ordinal>10</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>y</remote-name>
            <remote-type>5</remote-type>
            <local-name>[y]</local-name>
            <parent-name>[partFrame.csv]</parent-name>
            <remote-alias>y</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='CS' datatype='integer' name='[Calculation_945474464548577281]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[jungleMinionsKilled]+[minionsKilled]' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Current Gold' datatype='integer' name='[currentGold]' role='measure' type='quantitative' />
      <column caption='Dominion Score' datatype='real' name='[dominionScore]' role='measure' type='quantitative' />
      <column caption='Jungle Minions Killed' datatype='integer' name='[jungleMinionsKilled]' role='measure' type='quantitative' />
      <column caption='Level' datatype='integer' name='[level]' role='measure' type='quantitative' />
      <column caption='Minions Killed' datatype='integer' name='[minionsKilled]' role='measure' type='quantitative' />
      <column caption='Participant Id' datatype='integer' name='[participantId]' role='dimension' type='ordinal' />
      <column caption='Team Score' datatype='real' name='[teamScore]' role='measure' type='quantitative' />
      <column caption='Timestamp' datatype='integer' name='[timestamp]' role='measure' type='quantitative' />
      <column caption='Total Gold' datatype='integer' name='[totalGold]' role='measure' type='quantitative' />
      <column datatype='real' name='[x]' role='measure' type='quantitative' />
      <column caption='Xp' datatype='integer' name='[xp]' role='measure' type='quantitative' />
      <column datatype='real' name='[y]' role='measure' type='quantitative' />
      <column-instance column='[participantId]' derivation='None' name='[none:participantId:ok]' pivot='key' type='ordinal' />
      <column-instance column='[x]' derivation='None' name='[none:x:qk]' pivot='key' type='quantitative' />
      <column-instance column='[y]' derivation='None' name='[none:y:qk]' pivot='key' type='quantitative' />
      <group hidden='true' name='[Inclusions (Participant Id,x,y)]' name-style='unqualified' user:auto-column='include'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:participantId:ok]' />
          <groupfilter function='level-members' level='[none:x:qk]' />
          <groupfilter function='level-members' level='[none:y:qk]' />
        </groupfilter>
      </group>
      <mapped-images>
        <mapped-image caption='summoner_rift' expression='file:///C:/R/PyLeague/summoner_rift.png' name='[MappedImage1]'>
          <mapping bottom='0.0' left='0.0' right='15000.0' top='15000.0' x='[x]' y='[y]' />
          <image-options show-entire-image='true' />
        </mapped-image>
      </mapped-images>
      <layout dim-ordering='alphabetic' dim-percentage='0.326949' measure-ordering='alphabetic' measure-percentage='0.673051' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:participantId:ok]' type='palette'>
            <map to='#4e79a7'>
              <bucket>1</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>5</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>4</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>9</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>7</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>10</bucket>
            </map>
            <map to='#e15759'>
              <bucket>3</bucket>
            </map>
            <map to='#edc948'>
              <bucket>6</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>2</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>8</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='eventFrame' inline='true' name='federated.0s6bm4a1csz1pw19fp66k0saquyu' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='eventFrame' name='textscan.1xci9b50izoyex1ac1tv10h3vkn3'>
            <connection class='textscan' directory='C:/R/PyLeague' filename='eventFrame.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.1xci9b50izoyex1ac1tv10h3vkn3' name='eventFrame.csv' table='[eventFrame#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='integer' name='F1' ordinal='0' />
            <column datatype='real' name='afterId' ordinal='1' />
            <column datatype='string' name='assistingParticipantIds' ordinal='2' />
            <column datatype='real' name='beforeId' ordinal='3' />
            <column datatype='string' name='buildingType' ordinal='4' />
            <column datatype='real' name='creatorId' ordinal='5' />
            <column datatype='real' name='itemId' ordinal='6' />
            <column datatype='real' name='killerId' ordinal='7' />
            <column datatype='string' name='laneType' ordinal='8' />
            <column datatype='string' name='levelUpType' ordinal='9' />
            <column datatype='string' name='monsterSubType' ordinal='10' />
            <column datatype='string' name='monsterType' ordinal='11' />
            <column datatype='real' name='participantId' ordinal='12' />
            <column datatype='real' name='skillSlot' ordinal='13' />
            <column datatype='real' name='teamId' ordinal='14' />
            <column datatype='integer' name='timestamp' ordinal='15' />
            <column datatype='string' name='towerType' ordinal='16' />
            <column datatype='string' name='type' ordinal='17' />
            <column datatype='real' name='victimId' ordinal='18' />
            <column datatype='string' name='wardType' ordinal='19' />
            <column datatype='real' name='x' ordinal='20' />
            <column datatype='real' name='y' ordinal='21' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[eventFrame.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[eventFrame.csv]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>afterId</remote-name>
            <remote-type>5</remote-type>
            <local-name>[afterId]</local-name>
            <parent-name>[eventFrame.csv]</parent-name>
            <remote-alias>afterId</remote-alias>
            <ordinal>1</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>assistingParticipantIds</remote-name>
            <remote-type>129</remote-type>
            <local-name>[assistingParticipantIds]</local-name>
            <parent-name>[eventFrame.csv]</parent-name>
            <remote-alias>assistingParticipantIds</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>beforeId</remote-name>
            <remote-type>5</remote-type>
            <local-name>[beforeId]</local-name>
            <parent-name>[eventFrame.csv]</parent-name>
            <remote-alias>beforeId</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>buildingType</remote-name>
            <remote-type>129</remote-type>
            <local-name>[buildingType]</local-name>
            <parent-name>[eventFrame.csv]</parent-name>
            <remote-alias>buildingType</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>creatorId</remote-name>
            <remote-type>5</remote-type>
            <local-name>[creatorId]</local-name>
            <parent-name>[eventFrame.csv]</parent-name>
            <remote-alias>creatorId</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>itemId</remote-name>
            <remote-type>5</remote-type>
            <local-name>[itemId]</local-name>
            <parent-name>[eventFrame.csv]</parent-name>
            <remote-alias>itemId</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>killerId</remote-name>
            <remote-type>5</remote-type>
            <local-name>[killerId]</local-name>
            <parent-name>[eventFrame.csv]</parent-name>
            <remote-alias>killerId</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>laneType</remote-name>
            <remote-type>129</remote-type>
            <local-name>[laneType]</local-name>
            <parent-name>[eventFrame.csv]</parent-name>
            <remote-alias>laneType</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>levelUpType</remote-name>
            <remote-type>129</remote-type>
            <local-name>[levelUpType]</local-name>
            <parent-name>[eventFrame.csv]</parent-name>
            <remote-alias>levelUpType</remote-alias>
            <ordinal>9</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>monsterSubType</remote-name>
            <remote-type>129</remote-type>
            <local-name>[monsterSubType]</local-name>
            <parent-name>[eventFrame.csv]</parent-name>
            <remote-alias>monsterSubType</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>monsterType</remote-name>
            <remote-type>129</remote-type>
            <local-name>[monsterType]</local-name>
            <parent-name>[eventFrame.csv]</parent-name>
            <remote-alias>monsterType</remote-alias>
            <ordinal>11</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participantId</remote-name>
            <remote-type>5</remote-type>
            <local-name>[participantId]</local-name>
            <parent-name>[eventFrame.csv]</parent-name>
            <remote-alias>participantId</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>skillSlot</remote-name>
            <remote-type>5</remote-type>
            <local-name>[skillSlot]</local-name>
            <parent-name>[eventFrame.csv]</parent-name>
            <remote-alias>skillSlot</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>teamId</remote-name>
            <remote-type>5</remote-type>
            <local-name>[teamId]</local-name>
            <parent-name>[eventFrame.csv]</parent-name>
            <remote-alias>teamId</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timestamp</remote-name>
            <remote-type>20</remote-type>
            <local-name>[timestamp]</local-name>
            <parent-name>[eventFrame.csv]</parent-name>
            <remote-alias>timestamp</remote-alias>
            <ordinal>15</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>towerType</remote-name>
            <remote-type>129</remote-type>
            <local-name>[towerType]</local-name>
            <parent-name>[eventFrame.csv]</parent-name>
            <remote-alias>towerType</remote-alias>
            <ordinal>16</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>type</remote-name>
            <remote-type>129</remote-type>
            <local-name>[type]</local-name>
            <parent-name>[eventFrame.csv]</parent-name>
            <remote-alias>type</remote-alias>
            <ordinal>17</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>victimId</remote-name>
            <remote-type>5</remote-type>
            <local-name>[victimId]</local-name>
            <parent-name>[eventFrame.csv]</parent-name>
            <remote-alias>victimId</remote-alias>
            <ordinal>18</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>wardType</remote-name>
            <remote-type>129</remote-type>
            <local-name>[wardType]</local-name>
            <parent-name>[eventFrame.csv]</parent-name>
            <remote-alias>wardType</remote-alias>
            <ordinal>19</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>x</remote-name>
            <remote-type>5</remote-type>
            <local-name>[x]</local-name>
            <parent-name>[eventFrame.csv]</parent-name>
            <remote-alias>x</remote-alias>
            <ordinal>20</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>y</remote-name>
            <remote-type>5</remote-type>
            <local-name>[y]</local-name>
            <parent-name>[eventFrame.csv]</parent-name>
            <remote-alias>y</remote-alias>
            <ordinal>21</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='After Id' datatype='real' name='[afterId]' role='dimension' type='ordinal' />
      <column caption='Assisting Participant Ids' datatype='string' name='[assistingParticipantIds]' role='dimension' type='nominal' />
      <column caption='Before Id' datatype='real' name='[beforeId]' role='dimension' type='ordinal' />
      <column caption='Building Type' datatype='string' name='[buildingType]' role='dimension' type='nominal' />
      <column caption='Creator Id' datatype='real' name='[creatorId]' role='dimension' type='ordinal' />
      <column caption='Item Id' datatype='real' name='[itemId]' role='dimension' type='ordinal' />
      <column caption='Killer Id' datatype='real' name='[killerId]' role='dimension' type='ordinal' />
      <column caption='Lane Type' datatype='string' name='[laneType]' role='dimension' type='nominal' />
      <column caption='Level Up Type' datatype='string' name='[levelUpType]' role='dimension' type='nominal' />
      <column caption='Monster Sub Type' datatype='string' name='[monsterSubType]' role='dimension' type='nominal' />
      <column caption='Monster Type' datatype='string' name='[monsterType]' role='dimension' type='nominal' />
      <column caption='Participant Id' datatype='real' name='[participantId]' role='dimension' type='ordinal' />
      <column caption='Skill Slot' datatype='real' name='[skillSlot]' role='measure' type='quantitative' />
      <column caption='Team Id' datatype='real' name='[teamId]' role='dimension' type='ordinal' />
      <column caption='Timestamp' datatype='integer' name='[timestamp]' role='measure' type='quantitative' />
      <column caption='Tower Type' datatype='string' name='[towerType]' role='dimension' type='nominal' />
      <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
      <column caption='Victim Id' datatype='real' name='[victimId]' role='dimension' type='ordinal' />
      <column caption='Ward Type' datatype='string' name='[wardType]' role='dimension' type='nominal' />
      <column datatype='string' name='[x (group)]' role='dimension' type='nominal'>
        <calculation class='categorical-bin' column='[x]' default='&quot;Other&quot;' new-bin='true'>
          <bin default-name='true' value='&quot;10,266&quot;'>
            <value>10266.0</value>
          </bin>
        </calculation>
      </column>
      <column datatype='real' name='[x]' role='measure' type='quantitative' />
      <column datatype='real' name='[y]' role='measure' type='quantitative' />
      <column-instance column='[killerId]' derivation='None' name='[none:killerId:ok]' pivot='key' type='ordinal' />
      <column-instance column='[monsterType]' derivation='None' name='[none:monsterType:nk]' pivot='key' type='nominal' />
      <mapped-images>
        <mapped-image caption='summoner_rift' expression='file:///C:/R/PyLeague/summoner_rift.png' name='[MappedImage1]'>
          <mapping bottom='0.0' left='0.0' right='15000.0' top='15000.0' x='[x]' y='[y]' />
          <image-options show-entire-image='true' />
        </mapped-image>
      </mapped-images>
      <layout dim-ordering='alphabetic' dim-percentage='0.668883' measure-ordering='alphabetic' measure-percentage='0.331117' show-aliased-fields='true' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:killerId:ok]' palette='tableau-10' type='palette'>
            <map to='#1f77b4'>
              <bucket>1.0</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>3.0</bucket>
            </map>
            <map to='#499894'>
              <bucket>7.0</bucket>
            </map>
            <map to='#8c564b'>
              <bucket>9.0</bucket>
            </map>
            <map to='#9467bd'>
              <bucket>8.0</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>%null%</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>5.0</bucket>
            </map>
            <map to='#d62728'>
              <bucket>4.0</bucket>
            </map>
            <map to='#e377c2'>
              <bucket>10.0</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>6.0</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>2.0</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>0.0</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Calculation_945474464573530131:nk]' palette='color_blind_10_0' type='palette'>
            <map to='#1170aa'>
              <bucket>false</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#fc7d0b'>
              <bucket>true</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Calculation_945474464579477524:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#e15759'>
              <bucket>true</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>false</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:monsterType:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;DRAGON&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>%null%</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;RIFTHERALD&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource inline='true' name='Clipboard_20190118T224953' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Clipboard_20190118T224953' name='Clipboard_20190118T224953leaf'>
            <connection class='textscan' directory='C:/Users/ajwur/Documents/My Tableau Repository/Datasources/Clipboard_20190118T224953' />
          </named-connection>
        </named-connections>
        <relation connection='Clipboard_20190118T224953leaf' name='Clipboard_20190118T224953#txt' table='[Clipboard_20190118T224953#txt]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator='&#9;'>
            <column datatype='boolean' name='(Killer Id) &lt; 6' ordinal='0' />
            <column datatype='integer' name='x' ordinal='1' />
            <column datatype='integer' name='y' ordinal='2' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Clipboard_20190118T224953#txt]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;\\t&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>(Killer Id) &lt; 6</remote-name>
            <remote-type>11</remote-type>
            <local-name>[(Killer Id) &lt; 6]</local-name>
            <parent-name>[Clipboard_20190118T224953#txt]</parent-name>
            <remote-alias>(Killer Id) &lt; 6</remote-alias>
            <ordinal>0</ordinal>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>x</remote-name>
            <remote-type>20</remote-type>
            <local-name>[x]</local-name>
            <parent-name>[Clipboard_20190118T224953#txt]</parent-name>
            <remote-alias>x</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>y</remote-name>
            <remote-type>20</remote-type>
            <local-name>[y]</local-name>
            <parent-name>[Clipboard_20190118T224953#txt]</parent-name>
            <remote-alias>y</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='X' datatype='integer' name='[x]' role='measure' type='quantitative' />
      <column caption='Y' datatype='integer' name='[y]' role='measure' type='quantitative' />
      <layout dim-ordering='alphabetic' dim-percentage='0.472074' measure-ordering='alphabetic' measure-percentage='0.527926' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='output' inline='true' name='federated.18wdjif1x9zqlg12wdpxf0qhaojx' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='output' name='semistructpassivestore-direct.0uqwmxm0b8bis91f2dt0a1578otp'>
            <connection class='semistructpassivestore-direct' directory='C:/R/PyLeague' filename='output.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[output.json]'>
                  <map key='participantIdentities' value='true' />
                  <map key='participantIdentities.Value' value='true' />
                  <map key='participantIdentities.Value.player' value='true' />
                  <map key='participants' value='true' />
                  <map key='participants.Value' value='true' />
                  <map key='participants.Value.stats' value='true' />
                  <map key='participants.Value.timeline' value='true' />
                  <map key='participants.Value.timeline.creepsPerMinDeltas' value='true' />
                  <map key='participants.Value.timeline.csDiffPerMinDeltas' value='true' />
                  <map key='participants.Value.timeline.damageTakenDiffPerMinDeltas' value='true' />
                  <map key='participants.Value.timeline.damageTakenPerMinDeltas' value='true' />
                  <map key='participants.Value.timeline.goldPerMinDeltas' value='true' />
                  <map key='participants.Value.timeline.xpDiffPerMinDeltas' value='true' />
                  <map key='participants.Value.timeline.xpPerMinDeltas' value='true' />
                  <map key='teams' value='true' />
                  <map key='teams.Value' value='true' />
                  <map key='teams.Value.bans' value='true' />
                  <map key='teams.Value.bans.Value' value='true' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.0uqwmxm0b8bis91f2dt0a1578otp' name='output.json' table='[output.json]' type='table' />
        <cols>
          <map key='[0-10 (participants.timeline.creepsPerMinDeltas)]' value='[output.json].[participants.Value.timeline.creepsPerMinDeltas.0-10]' />
          <map key='[0-10 (participants.timeline.csDiffPerMinDeltas)]' value='[output.json].[participants.Value.timeline.csDiffPerMinDeltas.0-10]' />
          <map key='[0-10 (participants.timeline.damageTakenDiffPerMinDeltas)]' value='[output.json].[participants.Value.timeline.damageTakenDiffPerMinDeltas.0-10]' />
          <map key='[0-10 (participants.timeline.damageTakenPerMinDeltas)]' value='[output.json].[participants.Value.timeline.damageTakenPerMinDeltas.0-10]' />
          <map key='[0-10 (participants.timeline.goldPerMinDeltas)]' value='[output.json].[participants.Value.timeline.goldPerMinDeltas.0-10]' />
          <map key='[0-10 (participants.timeline.xpDiffPerMinDeltas)]' value='[output.json].[participants.Value.timeline.xpDiffPerMinDeltas.0-10]' />
          <map key='[0-10 (participants.timeline.xpPerMinDeltas)]' value='[output.json].[participants.Value.timeline.xpPerMinDeltas.0-10]' />
          <map key='[10-20 (participants.timeline.creepsPerMinDeltas)]' value='[output.json].[participants.Value.timeline.creepsPerMinDeltas.10-20]' />
          <map key='[10-20 (participants.timeline.csDiffPerMinDeltas)]' value='[output.json].[participants.Value.timeline.csDiffPerMinDeltas.10-20]' />
          <map key='[10-20 (participants.timeline.damageTakenDiffPerMinDeltas)]' value='[output.json].[participants.Value.timeline.damageTakenDiffPerMinDeltas.10-20]' />
          <map key='[10-20 (participants.timeline.damageTakenPerMinDeltas)]' value='[output.json].[participants.Value.timeline.damageTakenPerMinDeltas.10-20]' />
          <map key='[10-20 (participants.timeline.goldPerMinDeltas)]' value='[output.json].[participants.Value.timeline.goldPerMinDeltas.10-20]' />
          <map key='[10-20 (participants.timeline.xpDiffPerMinDeltas)]' value='[output.json].[participants.Value.timeline.xpDiffPerMinDeltas.10-20]' />
          <map key='[10-20 (participants.timeline.xpPerMinDeltas)]' value='[output.json].[participants.Value.timeline.xpPerMinDeltas.10-20]' />
          <map key='[Document Index (generated)]' value='[output.json].[Document Index (generated)]' />
          <map key='[accountId]' value='[output.json].[participantIdentities.Value.player.accountId]' />
          <map key='[assists]' value='[output.json].[participants.Value.stats.assists]' />
          <map key='[bans Index (generated)]' value='[output.json].[teams.Value.bans.Index (generated)]' />
          <map key='[baronKills]' value='[output.json].[teams.Value.baronKills]' />
          <map key='[champLevel]' value='[output.json].[participants.Value.stats.champLevel]' />
          <map key='[championId (participants)]' value='[output.json].[participants.Value.championId]' />
          <map key='[championId (teams.bans)]' value='[output.json].[teams.Value.bans.Value.championId]' />
          <map key='[combatPlayerScore]' value='[output.json].[participants.Value.stats.combatPlayerScore]' />
          <map key='[currentAccountId]' value='[output.json].[participantIdentities.Value.player.currentAccountId]' />
          <map key='[currentPlatformId]' value='[output.json].[participantIdentities.Value.player.currentPlatformId]' />
          <map key='[damageDealtToObjectives]' value='[output.json].[participants.Value.stats.damageDealtToObjectives]' />
          <map key='[damageDealtToTurrets]' value='[output.json].[participants.Value.stats.damageDealtToTurrets]' />
          <map key='[damageSelfMitigated]' value='[output.json].[participants.Value.stats.damageSelfMitigated]' />
          <map key='[deaths]' value='[output.json].[participants.Value.stats.deaths]' />
          <map key='[dominionVictoryScore]' value='[output.json].[teams.Value.dominionVictoryScore]' />
          <map key='[doubleKills]' value='[output.json].[participants.Value.stats.doubleKills]' />
          <map key='[dragonKills]' value='[output.json].[teams.Value.dragonKills]' />
          <map key='[firstBaron]' value='[output.json].[teams.Value.firstBaron]' />
          <map key='[firstBloodAssist]' value='[output.json].[participants.Value.stats.firstBloodAssist]' />
          <map key='[firstBloodKill]' value='[output.json].[participants.Value.stats.firstBloodKill]' />
          <map key='[firstBlood]' value='[output.json].[teams.Value.firstBlood]' />
          <map key='[firstDragon]' value='[output.json].[teams.Value.firstDragon]' />
          <map key='[firstInhibitor]' value='[output.json].[teams.Value.firstInhibitor]' />
          <map key='[firstRiftHerald]' value='[output.json].[teams.Value.firstRiftHerald]' />
          <map key='[firstTowerAssist]' value='[output.json].[participants.Value.stats.firstTowerAssist]' />
          <map key='[firstTowerKill]' value='[output.json].[participants.Value.stats.firstTowerKill]' />
          <map key='[firstTower]' value='[output.json].[teams.Value.firstTower]' />
          <map key='[gameCreation]' value='[output.json].[gameCreation]' />
          <map key='[gameDuration]' value='[output.json].[gameDuration]' />
          <map key='[gameId]' value='[output.json].[gameId]' />
          <map key='[gameMode]' value='[output.json].[gameMode]' />
          <map key='[gameType]' value='[output.json].[gameType]' />
          <map key='[gameVersion]' value='[output.json].[gameVersion]' />
          <map key='[goldEarned]' value='[output.json].[participants.Value.stats.goldEarned]' />
          <map key='[goldSpent]' value='[output.json].[participants.Value.stats.goldSpent]' />
          <map key='[highestAchievedSeasonTier]' value='[output.json].[participants.Value.highestAchievedSeasonTier]' />
          <map key='[inhibitorKills (participants.stats)]' value='[output.json].[participants.Value.stats.inhibitorKills]' />
          <map key='[inhibitorKills (teams)]' value='[output.json].[teams.Value.inhibitorKills]' />
          <map key='[item0]' value='[output.json].[participants.Value.stats.item0]' />
          <map key='[item1]' value='[output.json].[participants.Value.stats.item1]' />
          <map key='[item2]' value='[output.json].[participants.Value.stats.item2]' />
          <map key='[item3]' value='[output.json].[participants.Value.stats.item3]' />
          <map key='[item4]' value='[output.json].[participants.Value.stats.item4]' />
          <map key='[item5]' value='[output.json].[participants.Value.stats.item5]' />
          <map key='[item6]' value='[output.json].[participants.Value.stats.item6]' />
          <map key='[killingSprees]' value='[output.json].[participants.Value.stats.killingSprees]' />
          <map key='[kills]' value='[output.json].[participants.Value.stats.kills]' />
          <map key='[lane]' value='[output.json].[participants.Value.timeline.lane]' />
          <map key='[largestCriticalStrike]' value='[output.json].[participants.Value.stats.largestCriticalStrike]' />
          <map key='[largestKillingSpree]' value='[output.json].[participants.Value.stats.largestKillingSpree]' />
          <map key='[largestMultiKill]' value='[output.json].[participants.Value.stats.largestMultiKill]' />
          <map key='[longestTimeSpentLiving]' value='[output.json].[participants.Value.stats.longestTimeSpentLiving]' />
          <map key='[magicDamageDealtToChampions]' value='[output.json].[participants.Value.stats.magicDamageDealtToChampions]' />
          <map key='[magicDamageDealt]' value='[output.json].[participants.Value.stats.magicDamageDealt]' />
          <map key='[magicalDamageTaken]' value='[output.json].[participants.Value.stats.magicalDamageTaken]' />
          <map key='[mapId]' value='[output.json].[mapId]' />
          <map key='[matchHistoryUri]' value='[output.json].[participantIdentities.Value.player.matchHistoryUri]' />
          <map key='[neutralMinionsKilledEnemyJungle]' value='[output.json].[participants.Value.stats.neutralMinionsKilledEnemyJungle]' />
          <map key='[neutralMinionsKilledTeamJungle]' value='[output.json].[participants.Value.stats.neutralMinionsKilledTeamJungle]' />
          <map key='[neutralMinionsKilled]' value='[output.json].[participants.Value.stats.neutralMinionsKilled]' />
          <map key='[objectivePlayerScore]' value='[output.json].[participants.Value.stats.objectivePlayerScore]' />
          <map key='[participantId (participantIdentities)]' value='[output.json].[participantIdentities.Value.participantId]' />
          <map key='[participantId (participants)]' value='[output.json].[participants.Value.participantId]' />
          <map key='[participantId (participants.stats)]' value='[output.json].[participants.Value.stats.participantId]' />
          <map key='[participantId (participants.timeline)]' value='[output.json].[participants.Value.timeline.participantId]' />
          <map key='[participantIdentities Index (generated)]' value='[output.json].[participantIdentities.Index (generated)]' />
          <map key='[participants Index (generated)]' value='[output.json].[participants.Index (generated)]' />
          <map key='[pentaKills]' value='[output.json].[participants.Value.stats.pentaKills]' />
          <map key='[perk0Var1]' value='[output.json].[participants.Value.stats.perk0Var1]' />
          <map key='[perk0Var2]' value='[output.json].[participants.Value.stats.perk0Var2]' />
          <map key='[perk0Var3]' value='[output.json].[participants.Value.stats.perk0Var3]' />
          <map key='[perk0]' value='[output.json].[participants.Value.stats.perk0]' />
          <map key='[perk1Var1]' value='[output.json].[participants.Value.stats.perk1Var1]' />
          <map key='[perk1Var2]' value='[output.json].[participants.Value.stats.perk1Var2]' />
          <map key='[perk1Var3]' value='[output.json].[participants.Value.stats.perk1Var3]' />
          <map key='[perk1]' value='[output.json].[participants.Value.stats.perk1]' />
          <map key='[perk2Var1]' value='[output.json].[participants.Value.stats.perk2Var1]' />
          <map key='[perk2Var2]' value='[output.json].[participants.Value.stats.perk2Var2]' />
          <map key='[perk2Var3]' value='[output.json].[participants.Value.stats.perk2Var3]' />
          <map key='[perk2]' value='[output.json].[participants.Value.stats.perk2]' />
          <map key='[perk3Var1]' value='[output.json].[participants.Value.stats.perk3Var1]' />
          <map key='[perk3Var2]' value='[output.json].[participants.Value.stats.perk3Var2]' />
          <map key='[perk3Var3]' value='[output.json].[participants.Value.stats.perk3Var3]' />
          <map key='[perk3]' value='[output.json].[participants.Value.stats.perk3]' />
          <map key='[perk4Var1]' value='[output.json].[participants.Value.stats.perk4Var1]' />
          <map key='[perk4Var2]' value='[output.json].[participants.Value.stats.perk4Var2]' />
          <map key='[perk4Var3]' value='[output.json].[participants.Value.stats.perk4Var3]' />
          <map key='[perk4]' value='[output.json].[participants.Value.stats.perk4]' />
          <map key='[perk5Var1]' value='[output.json].[participants.Value.stats.perk5Var1]' />
          <map key='[perk5Var2]' value='[output.json].[participants.Value.stats.perk5Var2]' />
          <map key='[perk5Var3]' value='[output.json].[participants.Value.stats.perk5Var3]' />
          <map key='[perk5]' value='[output.json].[participants.Value.stats.perk5]' />
          <map key='[perkPrimaryStyle]' value='[output.json].[participants.Value.stats.perkPrimaryStyle]' />
          <map key='[perkSubStyle]' value='[output.json].[participants.Value.stats.perkSubStyle]' />
          <map key='[physicalDamageDealtToChampions]' value='[output.json].[participants.Value.stats.physicalDamageDealtToChampions]' />
          <map key='[physicalDamageDealt]' value='[output.json].[participants.Value.stats.physicalDamageDealt]' />
          <map key='[physicalDamageTaken]' value='[output.json].[participants.Value.stats.physicalDamageTaken]' />
          <map key='[pickTurn]' value='[output.json].[teams.Value.bans.Value.pickTurn]' />
          <map key='[platformId (participantIdentities.player)]' value='[output.json].[participantIdentities.Value.player.platformId]' />
          <map key='[platformId]' value='[output.json].[platformId]' />
          <map key='[playerScore0]' value='[output.json].[participants.Value.stats.playerScore0]' />
          <map key='[playerScore1]' value='[output.json].[participants.Value.stats.playerScore1]' />
          <map key='[playerScore2]' value='[output.json].[participants.Value.stats.playerScore2]' />
          <map key='[playerScore3]' value='[output.json].[participants.Value.stats.playerScore3]' />
          <map key='[playerScore4]' value='[output.json].[participants.Value.stats.playerScore4]' />
          <map key='[playerScore5]' value='[output.json].[participants.Value.stats.playerScore5]' />
          <map key='[playerScore6]' value='[output.json].[participants.Value.stats.playerScore6]' />
          <map key='[playerScore7]' value='[output.json].[participants.Value.stats.playerScore7]' />
          <map key='[playerScore8]' value='[output.json].[participants.Value.stats.playerScore8]' />
          <map key='[playerScore9]' value='[output.json].[participants.Value.stats.playerScore9]' />
          <map key='[profileIcon]' value='[output.json].[participantIdentities.Value.player.profileIcon]' />
          <map key='[quadraKills]' value='[output.json].[participants.Value.stats.quadraKills]' />
          <map key='[queueId]' value='[output.json].[queueId]' />
          <map key='[riftHeraldKills]' value='[output.json].[teams.Value.riftHeraldKills]' />
          <map key='[role]' value='[output.json].[participants.Value.timeline.role]' />
          <map key='[seasonId]' value='[output.json].[seasonId]' />
          <map key='[sightWardsBoughtInGame]' value='[output.json].[participants.Value.stats.sightWardsBoughtInGame]' />
          <map key='[spell1Id]' value='[output.json].[participants.Value.spell1Id]' />
          <map key='[spell2Id]' value='[output.json].[participants.Value.spell2Id]' />
          <map key='[statPerk0]' value='[output.json].[participants.Value.stats.statPerk0]' />
          <map key='[statPerk1]' value='[output.json].[participants.Value.stats.statPerk1]' />
          <map key='[statPerk2]' value='[output.json].[participants.Value.stats.statPerk2]' />
          <map key='[summonerId]' value='[output.json].[participantIdentities.Value.player.summonerId]' />
          <map key='[summonerName]' value='[output.json].[participantIdentities.Value.player.summonerName]' />
          <map key='[teamId (participants)]' value='[output.json].[participants.Value.teamId]' />
          <map key='[teamId (teams)]' value='[output.json].[teams.Value.teamId]' />
          <map key='[teams Index (generated)]' value='[output.json].[teams.Index (generated)]' />
          <map key='[timeCCingOthers]' value='[output.json].[participants.Value.stats.timeCCingOthers]' />
          <map key='[totalDamageDealtToChampions]' value='[output.json].[participants.Value.stats.totalDamageDealtToChampions]' />
          <map key='[totalDamageDealt]' value='[output.json].[participants.Value.stats.totalDamageDealt]' />
          <map key='[totalDamageTaken]' value='[output.json].[participants.Value.stats.totalDamageTaken]' />
          <map key='[totalHeal]' value='[output.json].[participants.Value.stats.totalHeal]' />
          <map key='[totalMinionsKilled]' value='[output.json].[participants.Value.stats.totalMinionsKilled]' />
          <map key='[totalPlayerScore]' value='[output.json].[participants.Value.stats.totalPlayerScore]' />
          <map key='[totalScoreRank]' value='[output.json].[participants.Value.stats.totalScoreRank]' />
          <map key='[totalTimeCrowdControlDealt]' value='[output.json].[participants.Value.stats.totalTimeCrowdControlDealt]' />
          <map key='[totalUnitsHealed]' value='[output.json].[participants.Value.stats.totalUnitsHealed]' />
          <map key='[towerKills]' value='[output.json].[teams.Value.towerKills]' />
          <map key='[tripleKills]' value='[output.json].[participants.Value.stats.tripleKills]' />
          <map key='[trueDamageDealtToChampions]' value='[output.json].[participants.Value.stats.trueDamageDealtToChampions]' />
          <map key='[trueDamageDealt]' value='[output.json].[participants.Value.stats.trueDamageDealt]' />
          <map key='[trueDamageTaken]' value='[output.json].[participants.Value.stats.trueDamageTaken]' />
          <map key='[turretKills]' value='[output.json].[participants.Value.stats.turretKills]' />
          <map key='[unrealKills]' value='[output.json].[participants.Value.stats.unrealKills]' />
          <map key='[vilemawKills]' value='[output.json].[teams.Value.vilemawKills]' />
          <map key='[visionScore]' value='[output.json].[participants.Value.stats.visionScore]' />
          <map key='[visionWardsBoughtInGame]' value='[output.json].[participants.Value.stats.visionWardsBoughtInGame]' />
          <map key='[wardsKilled]' value='[output.json].[participants.Value.stats.wardsKilled]' />
          <map key='[wardsPlaced]' value='[output.json].[participants.Value.stats.wardsPlaced]' />
          <map key='[win (participants.stats)]' value='[output.json].[participants.Value.stats.win]' />
          <map key='[win (teams)]' value='[output.json].[teams.Value.win]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>gameCreation</remote-name>
            <remote-type>5</remote-type>
            <local-name>[gameCreation]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>gameCreation</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>gameDuration</remote-name>
            <remote-type>5</remote-type>
            <local-name>[gameDuration]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>gameDuration</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>gameId</remote-name>
            <remote-type>5</remote-type>
            <local-name>[gameId]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>gameId</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>gameMode</remote-name>
            <remote-type>130</remote-type>
            <local-name>[gameMode]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>gameMode</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>gameType</remote-name>
            <remote-type>130</remote-type>
            <local-name>[gameType]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>gameType</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>gameVersion</remote-name>
            <remote-type>130</remote-type>
            <local-name>[gameVersion]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>gameVersion</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>mapId</remote-name>
            <remote-type>5</remote-type>
            <local-name>[mapId]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>mapId</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participantIdentities.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[participantIdentities Index (generated)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participantIdentities.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participantIdentities.Value.participantId</remote-name>
            <remote-type>5</remote-type>
            <local-name>[participantId (participantIdentities)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participantIdentities.Value.participantId</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participantIdentities.Value.player.accountId</remote-name>
            <remote-type>130</remote-type>
            <local-name>[accountId]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participantIdentities.Value.player.accountId</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participantIdentities.Value.player.currentAccountId</remote-name>
            <remote-type>130</remote-type>
            <local-name>[currentAccountId]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participantIdentities.Value.player.currentAccountId</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participantIdentities.Value.player.currentPlatformId</remote-name>
            <remote-type>130</remote-type>
            <local-name>[currentPlatformId]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participantIdentities.Value.player.currentPlatformId</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participantIdentities.Value.player.matchHistoryUri</remote-name>
            <remote-type>130</remote-type>
            <local-name>[matchHistoryUri]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participantIdentities.Value.player.matchHistoryUri</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participantIdentities.Value.player.platformId</remote-name>
            <remote-type>130</remote-type>
            <local-name>[platformId (participantIdentities.player)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participantIdentities.Value.player.platformId</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participantIdentities.Value.player.profileIcon</remote-name>
            <remote-type>5</remote-type>
            <local-name>[profileIcon]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participantIdentities.Value.player.profileIcon</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participantIdentities.Value.player.summonerId</remote-name>
            <remote-type>130</remote-type>
            <local-name>[summonerId]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participantIdentities.Value.player.summonerId</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participantIdentities.Value.player.summonerName</remote-name>
            <remote-type>130</remote-type>
            <local-name>[summonerName]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participantIdentities.Value.player.summonerName</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[participants Index (generated)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.championId</remote-name>
            <remote-type>5</remote-type>
            <local-name>[championId (participants)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.championId</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.highestAchievedSeasonTier</remote-name>
            <remote-type>130</remote-type>
            <local-name>[highestAchievedSeasonTier]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.highestAchievedSeasonTier</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.participantId</remote-name>
            <remote-type>5</remote-type>
            <local-name>[participantId (participants)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.participantId</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.spell1Id</remote-name>
            <remote-type>5</remote-type>
            <local-name>[spell1Id]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.spell1Id</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.spell2Id</remote-name>
            <remote-type>5</remote-type>
            <local-name>[spell2Id]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.spell2Id</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.assists</remote-name>
            <remote-type>5</remote-type>
            <local-name>[assists]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.assists</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.champLevel</remote-name>
            <remote-type>5</remote-type>
            <local-name>[champLevel]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.champLevel</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.combatPlayerScore</remote-name>
            <remote-type>5</remote-type>
            <local-name>[combatPlayerScore]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.combatPlayerScore</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.damageDealtToObjectives</remote-name>
            <remote-type>5</remote-type>
            <local-name>[damageDealtToObjectives]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.damageDealtToObjectives</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.damageDealtToTurrets</remote-name>
            <remote-type>5</remote-type>
            <local-name>[damageDealtToTurrets]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.damageDealtToTurrets</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.damageSelfMitigated</remote-name>
            <remote-type>5</remote-type>
            <local-name>[damageSelfMitigated]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.damageSelfMitigated</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.deaths</remote-name>
            <remote-type>5</remote-type>
            <local-name>[deaths]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.deaths</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.doubleKills</remote-name>
            <remote-type>5</remote-type>
            <local-name>[doubleKills]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.doubleKills</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.firstBloodAssist</remote-name>
            <remote-type>11</remote-type>
            <local-name>[firstBloodAssist]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.firstBloodAssist</remote-alias>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.firstBloodKill</remote-name>
            <remote-type>11</remote-type>
            <local-name>[firstBloodKill]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.firstBloodKill</remote-alias>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.firstTowerAssist</remote-name>
            <remote-type>11</remote-type>
            <local-name>[firstTowerAssist]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.firstTowerAssist</remote-alias>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.firstTowerKill</remote-name>
            <remote-type>11</remote-type>
            <local-name>[firstTowerKill]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.firstTowerKill</remote-alias>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.goldEarned</remote-name>
            <remote-type>5</remote-type>
            <local-name>[goldEarned]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.goldEarned</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.goldSpent</remote-name>
            <remote-type>5</remote-type>
            <local-name>[goldSpent]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.goldSpent</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.inhibitorKills</remote-name>
            <remote-type>5</remote-type>
            <local-name>[inhibitorKills (participants.stats)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.inhibitorKills</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.item0</remote-name>
            <remote-type>5</remote-type>
            <local-name>[item0]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.item0</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.item1</remote-name>
            <remote-type>5</remote-type>
            <local-name>[item1]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.item1</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.item2</remote-name>
            <remote-type>5</remote-type>
            <local-name>[item2]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.item2</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.item3</remote-name>
            <remote-type>5</remote-type>
            <local-name>[item3]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.item3</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.item4</remote-name>
            <remote-type>5</remote-type>
            <local-name>[item4]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.item4</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.item5</remote-name>
            <remote-type>5</remote-type>
            <local-name>[item5]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.item5</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.item6</remote-name>
            <remote-type>5</remote-type>
            <local-name>[item6]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.item6</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.killingSprees</remote-name>
            <remote-type>5</remote-type>
            <local-name>[killingSprees]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.killingSprees</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.kills</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kills]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.kills</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.largestCriticalStrike</remote-name>
            <remote-type>5</remote-type>
            <local-name>[largestCriticalStrike]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.largestCriticalStrike</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.largestKillingSpree</remote-name>
            <remote-type>5</remote-type>
            <local-name>[largestKillingSpree]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.largestKillingSpree</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.largestMultiKill</remote-name>
            <remote-type>5</remote-type>
            <local-name>[largestMultiKill]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.largestMultiKill</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.longestTimeSpentLiving</remote-name>
            <remote-type>5</remote-type>
            <local-name>[longestTimeSpentLiving]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.longestTimeSpentLiving</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.magicDamageDealt</remote-name>
            <remote-type>5</remote-type>
            <local-name>[magicDamageDealt]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.magicDamageDealt</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.magicDamageDealtToChampions</remote-name>
            <remote-type>5</remote-type>
            <local-name>[magicDamageDealtToChampions]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.magicDamageDealtToChampions</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.magicalDamageTaken</remote-name>
            <remote-type>5</remote-type>
            <local-name>[magicalDamageTaken]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.magicalDamageTaken</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.neutralMinionsKilled</remote-name>
            <remote-type>5</remote-type>
            <local-name>[neutralMinionsKilled]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.neutralMinionsKilled</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.neutralMinionsKilledEnemyJungle</remote-name>
            <remote-type>5</remote-type>
            <local-name>[neutralMinionsKilledEnemyJungle]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.neutralMinionsKilledEnemyJungle</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.neutralMinionsKilledTeamJungle</remote-name>
            <remote-type>5</remote-type>
            <local-name>[neutralMinionsKilledTeamJungle]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.neutralMinionsKilledTeamJungle</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.objectivePlayerScore</remote-name>
            <remote-type>5</remote-type>
            <local-name>[objectivePlayerScore]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.objectivePlayerScore</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.participantId</remote-name>
            <remote-type>5</remote-type>
            <local-name>[participantId (participants.stats)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.participantId</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.pentaKills</remote-name>
            <remote-type>5</remote-type>
            <local-name>[pentaKills]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.pentaKills</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.perk0</remote-name>
            <remote-type>5</remote-type>
            <local-name>[perk0]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.perk0</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.perk0Var1</remote-name>
            <remote-type>5</remote-type>
            <local-name>[perk0Var1]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.perk0Var1</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.perk0Var2</remote-name>
            <remote-type>5</remote-type>
            <local-name>[perk0Var2]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.perk0Var2</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.perk0Var3</remote-name>
            <remote-type>5</remote-type>
            <local-name>[perk0Var3]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.perk0Var3</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.perk1</remote-name>
            <remote-type>5</remote-type>
            <local-name>[perk1]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.perk1</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.perk1Var1</remote-name>
            <remote-type>5</remote-type>
            <local-name>[perk1Var1]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.perk1Var1</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.perk1Var2</remote-name>
            <remote-type>5</remote-type>
            <local-name>[perk1Var2]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.perk1Var2</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.perk1Var3</remote-name>
            <remote-type>5</remote-type>
            <local-name>[perk1Var3]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.perk1Var3</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.perk2</remote-name>
            <remote-type>5</remote-type>
            <local-name>[perk2]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.perk2</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.perk2Var1</remote-name>
            <remote-type>5</remote-type>
            <local-name>[perk2Var1]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.perk2Var1</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.perk2Var2</remote-name>
            <remote-type>5</remote-type>
            <local-name>[perk2Var2]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.perk2Var2</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.perk2Var3</remote-name>
            <remote-type>5</remote-type>
            <local-name>[perk2Var3]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.perk2Var3</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.perk3</remote-name>
            <remote-type>5</remote-type>
            <local-name>[perk3]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.perk3</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.perk3Var1</remote-name>
            <remote-type>5</remote-type>
            <local-name>[perk3Var1]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.perk3Var1</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.perk3Var2</remote-name>
            <remote-type>5</remote-type>
            <local-name>[perk3Var2]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.perk3Var2</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.perk3Var3</remote-name>
            <remote-type>5</remote-type>
            <local-name>[perk3Var3]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.perk3Var3</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.perk4</remote-name>
            <remote-type>5</remote-type>
            <local-name>[perk4]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.perk4</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.perk4Var1</remote-name>
            <remote-type>5</remote-type>
            <local-name>[perk4Var1]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.perk4Var1</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.perk4Var2</remote-name>
            <remote-type>5</remote-type>
            <local-name>[perk4Var2]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.perk4Var2</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.perk4Var3</remote-name>
            <remote-type>5</remote-type>
            <local-name>[perk4Var3]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.perk4Var3</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.perk5</remote-name>
            <remote-type>5</remote-type>
            <local-name>[perk5]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.perk5</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.perk5Var1</remote-name>
            <remote-type>5</remote-type>
            <local-name>[perk5Var1]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.perk5Var1</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.perk5Var2</remote-name>
            <remote-type>5</remote-type>
            <local-name>[perk5Var2]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.perk5Var2</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.perk5Var3</remote-name>
            <remote-type>5</remote-type>
            <local-name>[perk5Var3]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.perk5Var3</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.perkPrimaryStyle</remote-name>
            <remote-type>5</remote-type>
            <local-name>[perkPrimaryStyle]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.perkPrimaryStyle</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.perkSubStyle</remote-name>
            <remote-type>5</remote-type>
            <local-name>[perkSubStyle]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.perkSubStyle</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.physicalDamageDealt</remote-name>
            <remote-type>5</remote-type>
            <local-name>[physicalDamageDealt]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.physicalDamageDealt</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.physicalDamageDealtToChampions</remote-name>
            <remote-type>5</remote-type>
            <local-name>[physicalDamageDealtToChampions]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.physicalDamageDealtToChampions</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.physicalDamageTaken</remote-name>
            <remote-type>5</remote-type>
            <local-name>[physicalDamageTaken]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.physicalDamageTaken</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.playerScore0</remote-name>
            <remote-type>5</remote-type>
            <local-name>[playerScore0]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.playerScore0</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.playerScore1</remote-name>
            <remote-type>5</remote-type>
            <local-name>[playerScore1]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.playerScore1</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.playerScore2</remote-name>
            <remote-type>5</remote-type>
            <local-name>[playerScore2]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.playerScore2</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.playerScore3</remote-name>
            <remote-type>5</remote-type>
            <local-name>[playerScore3]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.playerScore3</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.playerScore4</remote-name>
            <remote-type>5</remote-type>
            <local-name>[playerScore4]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.playerScore4</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.playerScore5</remote-name>
            <remote-type>5</remote-type>
            <local-name>[playerScore5]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.playerScore5</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.playerScore6</remote-name>
            <remote-type>5</remote-type>
            <local-name>[playerScore6]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.playerScore6</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.playerScore7</remote-name>
            <remote-type>5</remote-type>
            <local-name>[playerScore7]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.playerScore7</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.playerScore8</remote-name>
            <remote-type>5</remote-type>
            <local-name>[playerScore8]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.playerScore8</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.playerScore9</remote-name>
            <remote-type>5</remote-type>
            <local-name>[playerScore9]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.playerScore9</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.quadraKills</remote-name>
            <remote-type>5</remote-type>
            <local-name>[quadraKills]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.quadraKills</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.sightWardsBoughtInGame</remote-name>
            <remote-type>5</remote-type>
            <local-name>[sightWardsBoughtInGame]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.sightWardsBoughtInGame</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.statPerk0</remote-name>
            <remote-type>5</remote-type>
            <local-name>[statPerk0]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.statPerk0</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.statPerk1</remote-name>
            <remote-type>5</remote-type>
            <local-name>[statPerk1]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.statPerk1</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.statPerk2</remote-name>
            <remote-type>5</remote-type>
            <local-name>[statPerk2]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.statPerk2</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.timeCCingOthers</remote-name>
            <remote-type>5</remote-type>
            <local-name>[timeCCingOthers]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.timeCCingOthers</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.totalDamageDealt</remote-name>
            <remote-type>5</remote-type>
            <local-name>[totalDamageDealt]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.totalDamageDealt</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.totalDamageDealtToChampions</remote-name>
            <remote-type>5</remote-type>
            <local-name>[totalDamageDealtToChampions]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.totalDamageDealtToChampions</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.totalDamageTaken</remote-name>
            <remote-type>5</remote-type>
            <local-name>[totalDamageTaken]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.totalDamageTaken</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.totalHeal</remote-name>
            <remote-type>5</remote-type>
            <local-name>[totalHeal]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.totalHeal</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.totalMinionsKilled</remote-name>
            <remote-type>5</remote-type>
            <local-name>[totalMinionsKilled]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.totalMinionsKilled</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.totalPlayerScore</remote-name>
            <remote-type>5</remote-type>
            <local-name>[totalPlayerScore]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.totalPlayerScore</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.totalScoreRank</remote-name>
            <remote-type>5</remote-type>
            <local-name>[totalScoreRank]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.totalScoreRank</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.totalTimeCrowdControlDealt</remote-name>
            <remote-type>5</remote-type>
            <local-name>[totalTimeCrowdControlDealt]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.totalTimeCrowdControlDealt</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.totalUnitsHealed</remote-name>
            <remote-type>5</remote-type>
            <local-name>[totalUnitsHealed]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.totalUnitsHealed</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.tripleKills</remote-name>
            <remote-type>5</remote-type>
            <local-name>[tripleKills]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.tripleKills</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.trueDamageDealt</remote-name>
            <remote-type>5</remote-type>
            <local-name>[trueDamageDealt]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.trueDamageDealt</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.trueDamageDealtToChampions</remote-name>
            <remote-type>5</remote-type>
            <local-name>[trueDamageDealtToChampions]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.trueDamageDealtToChampions</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.trueDamageTaken</remote-name>
            <remote-type>5</remote-type>
            <local-name>[trueDamageTaken]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.trueDamageTaken</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.turretKills</remote-name>
            <remote-type>5</remote-type>
            <local-name>[turretKills]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.turretKills</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.unrealKills</remote-name>
            <remote-type>5</remote-type>
            <local-name>[unrealKills]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.unrealKills</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.visionScore</remote-name>
            <remote-type>5</remote-type>
            <local-name>[visionScore]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.visionScore</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.visionWardsBoughtInGame</remote-name>
            <remote-type>5</remote-type>
            <local-name>[visionWardsBoughtInGame]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.visionWardsBoughtInGame</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.wardsKilled</remote-name>
            <remote-type>5</remote-type>
            <local-name>[wardsKilled]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.wardsKilled</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.wardsPlaced</remote-name>
            <remote-type>5</remote-type>
            <local-name>[wardsPlaced]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.wardsPlaced</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.stats.win</remote-name>
            <remote-type>11</remote-type>
            <local-name>[win (participants.stats)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.stats.win</remote-alias>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.teamId</remote-name>
            <remote-type>5</remote-type>
            <local-name>[teamId (participants)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.teamId</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.timeline.creepsPerMinDeltas.0-10</remote-name>
            <remote-type>5</remote-type>
            <local-name>[0-10 (participants.timeline.creepsPerMinDeltas)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.timeline.creepsPerMinDeltas.0-10</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.timeline.creepsPerMinDeltas.10-20</remote-name>
            <remote-type>5</remote-type>
            <local-name>[10-20 (participants.timeline.creepsPerMinDeltas)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.timeline.creepsPerMinDeltas.10-20</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.timeline.csDiffPerMinDeltas.0-10</remote-name>
            <remote-type>5</remote-type>
            <local-name>[0-10 (participants.timeline.csDiffPerMinDeltas)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.timeline.csDiffPerMinDeltas.0-10</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.timeline.csDiffPerMinDeltas.10-20</remote-name>
            <remote-type>5</remote-type>
            <local-name>[10-20 (participants.timeline.csDiffPerMinDeltas)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.timeline.csDiffPerMinDeltas.10-20</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.timeline.damageTakenDiffPerMinDeltas.0-10</remote-name>
            <remote-type>5</remote-type>
            <local-name>[0-10 (participants.timeline.damageTakenDiffPerMinDeltas)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.timeline.damageTakenDiffPerMinDeltas.0-10</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.timeline.damageTakenDiffPerMinDeltas.10-20</remote-name>
            <remote-type>5</remote-type>
            <local-name>[10-20 (participants.timeline.damageTakenDiffPerMinDeltas)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.timeline.damageTakenDiffPerMinDeltas.10-20</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.timeline.damageTakenPerMinDeltas.0-10</remote-name>
            <remote-type>5</remote-type>
            <local-name>[0-10 (participants.timeline.damageTakenPerMinDeltas)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.timeline.damageTakenPerMinDeltas.0-10</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.timeline.damageTakenPerMinDeltas.10-20</remote-name>
            <remote-type>5</remote-type>
            <local-name>[10-20 (participants.timeline.damageTakenPerMinDeltas)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.timeline.damageTakenPerMinDeltas.10-20</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.timeline.goldPerMinDeltas.0-10</remote-name>
            <remote-type>5</remote-type>
            <local-name>[0-10 (participants.timeline.goldPerMinDeltas)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.timeline.goldPerMinDeltas.0-10</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.timeline.goldPerMinDeltas.10-20</remote-name>
            <remote-type>5</remote-type>
            <local-name>[10-20 (participants.timeline.goldPerMinDeltas)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.timeline.goldPerMinDeltas.10-20</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.timeline.lane</remote-name>
            <remote-type>130</remote-type>
            <local-name>[lane]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.timeline.lane</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.timeline.participantId</remote-name>
            <remote-type>5</remote-type>
            <local-name>[participantId (participants.timeline)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.timeline.participantId</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.timeline.role</remote-name>
            <remote-type>130</remote-type>
            <local-name>[role]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.timeline.role</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.timeline.xpDiffPerMinDeltas.0-10</remote-name>
            <remote-type>5</remote-type>
            <local-name>[0-10 (participants.timeline.xpDiffPerMinDeltas)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.timeline.xpDiffPerMinDeltas.0-10</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.timeline.xpDiffPerMinDeltas.10-20</remote-name>
            <remote-type>5</remote-type>
            <local-name>[10-20 (participants.timeline.xpDiffPerMinDeltas)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.timeline.xpDiffPerMinDeltas.10-20</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.timeline.xpPerMinDeltas.0-10</remote-name>
            <remote-type>5</remote-type>
            <local-name>[0-10 (participants.timeline.xpPerMinDeltas)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.timeline.xpPerMinDeltas.0-10</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>participants.Value.timeline.xpPerMinDeltas.10-20</remote-name>
            <remote-type>5</remote-type>
            <local-name>[10-20 (participants.timeline.xpPerMinDeltas)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>participants.Value.timeline.xpPerMinDeltas.10-20</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>platformId</remote-name>
            <remote-type>130</remote-type>
            <local-name>[platformId]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>platformId</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>queueId</remote-name>
            <remote-type>5</remote-type>
            <local-name>[queueId]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>queueId</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>seasonId</remote-name>
            <remote-type>5</remote-type>
            <local-name>[seasonId]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>seasonId</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>teams.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[teams Index (generated)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>teams.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>teams.Value.bans.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[bans Index (generated)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>teams.Value.bans.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>teams.Value.bans.Value.championId</remote-name>
            <remote-type>5</remote-type>
            <local-name>[championId (teams.bans)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>teams.Value.bans.Value.championId</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>teams.Value.bans.Value.pickTurn</remote-name>
            <remote-type>5</remote-type>
            <local-name>[pickTurn]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>teams.Value.bans.Value.pickTurn</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>teams.Value.baronKills</remote-name>
            <remote-type>5</remote-type>
            <local-name>[baronKills]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>teams.Value.baronKills</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>teams.Value.dominionVictoryScore</remote-name>
            <remote-type>5</remote-type>
            <local-name>[dominionVictoryScore]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>teams.Value.dominionVictoryScore</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>teams.Value.dragonKills</remote-name>
            <remote-type>5</remote-type>
            <local-name>[dragonKills]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>teams.Value.dragonKills</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>teams.Value.firstBaron</remote-name>
            <remote-type>11</remote-type>
            <local-name>[firstBaron]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>teams.Value.firstBaron</remote-alias>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>teams.Value.firstBlood</remote-name>
            <remote-type>11</remote-type>
            <local-name>[firstBlood]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>teams.Value.firstBlood</remote-alias>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>teams.Value.firstDragon</remote-name>
            <remote-type>11</remote-type>
            <local-name>[firstDragon]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>teams.Value.firstDragon</remote-alias>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>teams.Value.firstInhibitor</remote-name>
            <remote-type>11</remote-type>
            <local-name>[firstInhibitor]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>teams.Value.firstInhibitor</remote-alias>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>teams.Value.firstRiftHerald</remote-name>
            <remote-type>11</remote-type>
            <local-name>[firstRiftHerald]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>teams.Value.firstRiftHerald</remote-alias>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>teams.Value.firstTower</remote-name>
            <remote-type>11</remote-type>
            <local-name>[firstTower]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>teams.Value.firstTower</remote-alias>
            <local-type>boolean</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>teams.Value.inhibitorKills</remote-name>
            <remote-type>5</remote-type>
            <local-name>[inhibitorKills (teams)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>teams.Value.inhibitorKills</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>teams.Value.riftHeraldKills</remote-name>
            <remote-type>5</remote-type>
            <local-name>[riftHeraldKills]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>teams.Value.riftHeraldKills</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>teams.Value.teamId</remote-name>
            <remote-type>5</remote-type>
            <local-name>[teamId (teams)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>teams.Value.teamId</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>teams.Value.towerKills</remote-name>
            <remote-type>5</remote-type>
            <local-name>[towerKills]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>teams.Value.towerKills</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>teams.Value.vilemawKills</remote-name>
            <remote-type>5</remote-type>
            <local-name>[vilemawKills]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>teams.Value.vilemawKills</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>teams.Value.win</remote-name>
            <remote-type>130</remote-type>
            <local-name>[win (teams)]</local-name>
            <parent-name>[output.json]</parent-name>
            <remote-alias>teams.Value.win</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' name='[0-10 (participants.timeline.creepsPerMinDeltas)]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.timeline.creepsPerMinDeltas.0-10</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[0-10 (participants.timeline.csDiffPerMinDeltas)]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.timeline.csDiffPerMinDeltas.0-10</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[0-10 (participants.timeline.damageTakenDiffPerMinDeltas)]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.timeline.damageTakenDiffPerMinDeltas.0-10</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[0-10 (participants.timeline.damageTakenPerMinDeltas)]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.timeline.damageTakenPerMinDeltas.0-10</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[0-10 (participants.timeline.goldPerMinDeltas)]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.timeline.goldPerMinDeltas.0-10</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[0-10 (participants.timeline.xpDiffPerMinDeltas)]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.timeline.xpDiffPerMinDeltas.0-10</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[0-10 (participants.timeline.xpPerMinDeltas)]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.timeline.xpPerMinDeltas.0-10</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[0-10 per participants.timeline.creepsPerMinDeltas]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([0-10 (participants.timeline.creepsPerMinDeltas)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at creepsPerMinDeltas level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[0-10 per participants.timeline.csDiffPerMinDeltas]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([0-10 (participants.timeline.csDiffPerMinDeltas)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at csDiffPerMinDeltas level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[0-10 per participants.timeline.damageTakenDiffPerMinDeltas]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([0-10 (participants.timeline.damageTakenDiffPerMinDeltas)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at damageTakenDiffPerMinDeltas level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[0-10 per participants.timeline.damageTakenPerMinDeltas]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([0-10 (participants.timeline.damageTakenPerMinDeltas)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at damageTakenPerMinDeltas level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[0-10 per participants.timeline.goldPerMinDeltas]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([0-10 (participants.timeline.goldPerMinDeltas)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at goldPerMinDeltas level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[0-10 per participants.timeline.xpDiffPerMinDeltas]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([0-10 (participants.timeline.xpDiffPerMinDeltas)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at xpDiffPerMinDeltas level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[0-10 per participants.timeline.xpPerMinDeltas]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([0-10 (participants.timeline.xpPerMinDeltas)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at xpPerMinDeltas level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[10-20 (participants.timeline.creepsPerMinDeltas)]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.timeline.creepsPerMinDeltas.10-20</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[10-20 (participants.timeline.csDiffPerMinDeltas)]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.timeline.csDiffPerMinDeltas.10-20</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[10-20 (participants.timeline.damageTakenDiffPerMinDeltas)]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.timeline.damageTakenDiffPerMinDeltas.10-20</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[10-20 (participants.timeline.damageTakenPerMinDeltas)]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.timeline.damageTakenPerMinDeltas.10-20</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[10-20 (participants.timeline.goldPerMinDeltas)]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.timeline.goldPerMinDeltas.10-20</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[10-20 (participants.timeline.xpDiffPerMinDeltas)]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.timeline.xpDiffPerMinDeltas.10-20</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[10-20 (participants.timeline.xpPerMinDeltas)]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.timeline.xpPerMinDeltas.10-20</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[10-20 per participants.timeline.creepsPerMinDeltas]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([10-20 (participants.timeline.creepsPerMinDeltas)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at creepsPerMinDeltas level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[10-20 per participants.timeline.csDiffPerMinDeltas]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([10-20 (participants.timeline.csDiffPerMinDeltas)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at csDiffPerMinDeltas level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[10-20 per participants.timeline.damageTakenDiffPerMinDeltas]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([10-20 (participants.timeline.damageTakenDiffPerMinDeltas)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at damageTakenDiffPerMinDeltas level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[10-20 per participants.timeline.damageTakenPerMinDeltas]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([10-20 (participants.timeline.damageTakenPerMinDeltas)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at damageTakenPerMinDeltas level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[10-20 per participants.timeline.goldPerMinDeltas]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([10-20 (participants.timeline.goldPerMinDeltas)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at goldPerMinDeltas level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[10-20 per participants.timeline.xpDiffPerMinDeltas]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([10-20 (participants.timeline.xpDiffPerMinDeltas)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at xpDiffPerMinDeltas level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[10-20 per participants.timeline.xpPerMinDeltas]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([10-20 (participants.timeline.xpPerMinDeltas)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at xpPerMinDeltas level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Assists per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([assists]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Baron Kills per teams]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[teams Index (generated)] : MAX([baronKills]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at teams level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Champ Level per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([champLevel]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Combat Player Score per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([combatPlayerScore]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Damage Dealt To Objectives per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([damageDealtToObjectives]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Damage Dealt To Turrets per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([damageDealtToTurrets]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Damage Self Mitigated per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([damageSelfMitigated]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Deaths per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([deaths]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Dominion Victory Score per teams]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[teams Index (generated)] : MAX([dominionVictoryScore]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at teams level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Double Kills per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([doubleKills]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Dragon Kills per teams]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[teams Index (generated)] : MAX([dragonKills]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at teams level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Game Creation per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([gameCreation]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Game Duration per Document]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)] : MAX([gameDuration]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Document level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Gold Earned per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([goldEarned]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Gold Spent per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([goldSpent]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Item0 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([item0]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Item1 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([item1]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Item2 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([item2]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Item3 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([item3]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Item4 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([item4]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Item5 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([item5]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Item6 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([item6]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Killing Sprees per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([killingSprees]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Kills per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([kills]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Largest Critical Strike per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([largestCriticalStrike]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Largest Killing Spree per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([largestKillingSpree]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Largest Multi Kill per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([largestMultiKill]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Longest Time Spent Living per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([longestTimeSpentLiving]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Magic Damage Dealt To Champions per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([magicDamageDealtToChampions]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Magic Damage Dealt per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([magicDamageDealt]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Magical Damage Taken per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([magicalDamageTaken]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Neutral Minions Killed Enemy Jungle per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([neutralMinionsKilledEnemyJungle]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Neutral Minions Killed Team Jungle per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([neutralMinionsKilledTeamJungle]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Neutral Minions Killed per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([neutralMinionsKilled]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per bans]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)],[teams Index (generated)] : COUNTD([bans Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at bans level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per output.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at output.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per participantIdentities]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([participantIdentities Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at participantIdentities level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per participants]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([participants Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at participants level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per teams]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([teams Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at teams level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Objective Player Score per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([objectivePlayerScore]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Penta Kills per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([pentaKills]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Perk Primary Style per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([perkPrimaryStyle]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Perk Sub Style per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([perkSubStyle]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Perk0 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([perk0]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Perk1 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([perk1]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Perk2 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([perk2]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Perk3 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([perk3]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Perk4 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([perk4]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Perk5 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([perk5]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Physical Damage Dealt To Champions per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([physicalDamageDealtToChampions]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Physical Damage Dealt per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([physicalDamageDealt]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Physical Damage Taken per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([physicalDamageTaken]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Pick Turn per bans]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[bans Index (generated)],[teams Index (generated)] : MAX([pickTurn]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at bans level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Profile Icon per player]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participantIdentities Index (generated)] : MAX([profileIcon]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at player level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Quadra Kills per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([quadraKills]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Rift Herald Kills per teams]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[teams Index (generated)] : MAX([riftHeraldKills]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at teams level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Sight Wards Bought In Game per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([sightWardsBoughtInGame]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Time C Cing Others per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([timeCCingOthers]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Total Damage Dealt To Champions per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([totalDamageDealtToChampions]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Total Damage Dealt per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([totalDamageDealt]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Total Damage Taken per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([totalDamageTaken]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Total Heal per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([totalHeal]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Total Minions Killed per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([totalMinionsKilled]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Total Player Score per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([totalPlayerScore]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Total Score Rank per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([totalScoreRank]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Total Time Crowd Control Dealt per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([totalTimeCrowdControlDealt]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Total Units Healed per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([totalUnitsHealed]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Tower Kills per teams]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[teams Index (generated)] : MAX([towerKills]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at teams level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Triple Kills per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([tripleKills]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[True Damage Dealt To Champions per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([trueDamageDealtToChampions]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[True Damage Dealt per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([trueDamageDealt]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[True Damage Taken per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([trueDamageTaken]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Turret Kills per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([turretKills]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Unreal Kills per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([unrealKills]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Vilemaw Kills per teams]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[teams Index (generated)] : MAX([vilemawKills]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at teams level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Vision Score per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([visionScore]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Vision Wards Bought In Game per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([visionWardsBoughtInGame]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Wards Killed per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([wardsKilled]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Wards Placed per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([wardsPlaced]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Account Id' datatype='string' name='[accountId]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>participantIdentities.Value.player.accountId</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Assists' datatype='real' name='[assists]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.assists</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[bans Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>teams.Value.bans.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Baron Kills' datatype='real' name='[baronKills]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>teams.Value.baronKills</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Champ Level' datatype='real' name='[champLevel]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.champLevel</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='real' name='[championId (participants)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>participants.Value.championId</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='real' name='[championId (teams.bans)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>teams.Value.bans.Value.championId</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Combat Player Score' datatype='real' name='[combatPlayerScore]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.combatPlayerScore</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Current Account Id' datatype='string' name='[currentAccountId]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>participantIdentities.Value.player.currentAccountId</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Current Platform Id' datatype='string' name='[currentPlatformId]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>participantIdentities.Value.player.currentPlatformId</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Damage Dealt To Objectives' datatype='real' name='[damageDealtToObjectives]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.damageDealtToObjectives</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Damage Dealt To Turrets' datatype='real' name='[damageDealtToTurrets]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.damageDealtToTurrets</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Damage Self Mitigated' datatype='real' name='[damageSelfMitigated]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.damageSelfMitigated</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Deaths' datatype='real' name='[deaths]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.deaths</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Dominion Victory Score' datatype='real' name='[dominionVictoryScore]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>teams.Value.dominionVictoryScore</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Double Kills' datatype='real' name='[doubleKills]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.doubleKills</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Dragon Kills' datatype='real' name='[dragonKills]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>teams.Value.dragonKills</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='First Baron' datatype='boolean' name='[firstBaron]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>teams.Value.firstBaron</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='First Blood Assist' datatype='boolean' name='[firstBloodAssist]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.firstBloodAssist</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='First Blood Kill' datatype='boolean' name='[firstBloodKill]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.firstBloodKill</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='First Blood' datatype='boolean' name='[firstBlood]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>teams.Value.firstBlood</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='First Dragon' datatype='boolean' name='[firstDragon]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>teams.Value.firstDragon</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='First Inhibitor' datatype='boolean' name='[firstInhibitor]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>teams.Value.firstInhibitor</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='First Rift Herald' datatype='boolean' name='[firstRiftHerald]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>teams.Value.firstRiftHerald</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='First Tower Assist' datatype='boolean' name='[firstTowerAssist]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.firstTowerAssist</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='First Tower Kill' datatype='boolean' name='[firstTowerKill]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.firstTowerKill</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='First Tower' datatype='boolean' name='[firstTower]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>teams.Value.firstTower</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Game Creation' datatype='real' name='[gameCreation]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>gameCreation</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Game Duration' datatype='real' name='[gameDuration]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>gameDuration</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Game Id' datatype='real' name='[gameId]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>gameId</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Game Mode' datatype='string' name='[gameMode]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>gameMode</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Game Type' datatype='string' name='[gameType]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>gameType</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Game Version' datatype='string' name='[gameVersion]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>gameVersion</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Gold Earned' datatype='real' name='[goldEarned]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.goldEarned</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Gold Spent' datatype='real' name='[goldSpent]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.goldSpent</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Highest Achieved Season Tier' datatype='string' name='[highestAchievedSeasonTier]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>participants.Value.highestAchievedSeasonTier</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[inhibitorKills (participants.stats)]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.inhibitorKills</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[inhibitorKills (teams)]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>teams.Value.inhibitorKills</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[inhibitorKills per participants.stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([inhibitorKills (participants.stats)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[inhibitorKills per teams]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[teams Index (generated)] : MAX([inhibitorKills (teams)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at teams level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Item0' datatype='real' name='[item0]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.item0</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Item1' datatype='real' name='[item1]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.item1</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Item2' datatype='real' name='[item2]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.item2</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Item3' datatype='real' name='[item3]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.item3</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Item4' datatype='real' name='[item4]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.item4</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Item5' datatype='real' name='[item5]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.item5</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Item6' datatype='real' name='[item6]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.item6</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Killing Sprees' datatype='real' name='[killingSprees]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.killingSprees</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Kills' datatype='real' name='[kills]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.kills</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Lane' datatype='string' name='[lane]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>participants.Value.timeline.lane</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Largest Critical Strike' datatype='real' name='[largestCriticalStrike]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.largestCriticalStrike</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Largest Killing Spree' datatype='real' name='[largestKillingSpree]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.largestKillingSpree</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Largest Multi Kill' datatype='real' name='[largestMultiKill]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.largestMultiKill</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Longest Time Spent Living' datatype='real' name='[longestTimeSpentLiving]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.longestTimeSpentLiving</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Magic Damage Dealt To Champions' datatype='real' name='[magicDamageDealtToChampions]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.magicDamageDealtToChampions</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Magic Damage Dealt' datatype='real' name='[magicDamageDealt]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.magicDamageDealt</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Magical Damage Taken' datatype='real' name='[magicalDamageTaken]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.magicalDamageTaken</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Map Id' datatype='real' name='[mapId]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>mapId</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Match History Uri' datatype='string' name='[matchHistoryUri]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>participantIdentities.Value.player.matchHistoryUri</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Neutral Minions Killed Enemy Jungle' datatype='real' name='[neutralMinionsKilledEnemyJungle]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.neutralMinionsKilledEnemyJungle</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Neutral Minions Killed Team Jungle' datatype='real' name='[neutralMinionsKilledTeamJungle]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.neutralMinionsKilledTeamJungle</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Neutral Minions Killed' datatype='real' name='[neutralMinionsKilled]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.neutralMinionsKilled</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Objective Player Score' datatype='real' name='[objectivePlayerScore]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.objectivePlayerScore</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='real' name='[participantId (participantIdentities)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>participantIdentities.Value.participantId</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='real' name='[participantId (participants)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>participants.Value.participantId</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='real' name='[participantId (participants.stats)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.participantId</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='real' name='[participantId (participants.timeline)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>participants.Value.timeline.participantId</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[participantIdentities Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>participantIdentities.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[participants Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>participants.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Penta Kills' datatype='real' name='[pentaKills]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.pentaKills</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[perk0Var1 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([perk0Var1]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[perk0Var1]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.perk0Var1</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[perk0Var2 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([perk0Var2]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[perk0Var2]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.perk0Var2</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[perk0Var3 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([perk0Var3]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[perk0Var3]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.perk0Var3</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Perk0' datatype='real' name='[perk0]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.perk0</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[perk1Var1 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([perk1Var1]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[perk1Var1]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.perk1Var1</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[perk1Var2 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([perk1Var2]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[perk1Var2]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.perk1Var2</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[perk1Var3 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([perk1Var3]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[perk1Var3]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.perk1Var3</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Perk1' datatype='real' name='[perk1]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.perk1</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[perk2Var1 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([perk2Var1]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[perk2Var1]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.perk2Var1</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[perk2Var2 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([perk2Var2]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[perk2Var2]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.perk2Var2</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[perk2Var3 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([perk2Var3]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[perk2Var3]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.perk2Var3</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Perk2' datatype='real' name='[perk2]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.perk2</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[perk3Var1 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([perk3Var1]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[perk3Var1]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.perk3Var1</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[perk3Var2 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([perk3Var2]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[perk3Var2]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.perk3Var2</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[perk3Var3 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([perk3Var3]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[perk3Var3]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.perk3Var3</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Perk3' datatype='real' name='[perk3]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.perk3</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[perk4Var1 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([perk4Var1]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[perk4Var1]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.perk4Var1</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[perk4Var2 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([perk4Var2]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[perk4Var2]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.perk4Var2</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[perk4Var3 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([perk4Var3]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[perk4Var3]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.perk4Var3</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Perk4' datatype='real' name='[perk4]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.perk4</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[perk5Var1 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([perk5Var1]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[perk5Var1]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.perk5Var1</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[perk5Var2 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([perk5Var2]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[perk5Var2]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.perk5Var2</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[perk5Var3 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([perk5Var3]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[perk5Var3]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.perk5Var3</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Perk5' datatype='real' name='[perk5]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.perk5</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Perk Primary Style' datatype='real' name='[perkPrimaryStyle]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.perkPrimaryStyle</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Perk Sub Style' datatype='real' name='[perkSubStyle]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.perkSubStyle</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Physical Damage Dealt To Champions' datatype='real' name='[physicalDamageDealtToChampions]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.physicalDamageDealtToChampions</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Physical Damage Dealt' datatype='real' name='[physicalDamageDealt]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.physicalDamageDealt</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Physical Damage Taken' datatype='real' name='[physicalDamageTaken]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.physicalDamageTaken</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Pick Turn' datatype='real' name='[pickTurn]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>teams.Value.bans.Value.pickTurn</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='string' name='[platformId (participantIdentities.player)]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>participantIdentities.Value.player.platformId</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Platform Id' datatype='string' name='[platformId]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>platformId</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[playerScore0 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([playerScore0]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[playerScore0]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.playerScore0</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[playerScore1 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([playerScore1]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[playerScore1]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.playerScore1</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[playerScore2 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([playerScore2]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[playerScore2]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.playerScore2</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[playerScore3 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([playerScore3]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[playerScore3]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.playerScore3</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[playerScore4 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([playerScore4]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[playerScore4]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.playerScore4</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[playerScore5 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([playerScore5]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[playerScore5]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.playerScore5</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[playerScore6 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([playerScore6]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[playerScore6]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.playerScore6</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[playerScore7 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([playerScore7]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[playerScore7]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.playerScore7</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[playerScore8 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([playerScore8]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[playerScore8]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.playerScore8</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[playerScore9 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([playerScore9]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[playerScore9]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.playerScore9</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Profile Icon' datatype='real' name='[profileIcon]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participantIdentities.Value.player.profileIcon</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Quadra Kills' datatype='real' name='[quadraKills]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.quadraKills</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Queue Id' datatype='real' name='[queueId]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>queueId</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Rift Herald Kills' datatype='real' name='[riftHeraldKills]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>teams.Value.riftHeraldKills</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Role' datatype='string' name='[role]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>participants.Value.timeline.role</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Season Id' datatype='real' name='[seasonId]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>seasonId</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Sight Wards Bought In Game' datatype='real' name='[sightWardsBoughtInGame]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.sightWardsBoughtInGame</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='real' name='[spell1Id]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>participants.Value.spell1Id</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='real' name='[spell2Id]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>participants.Value.spell2Id</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[statPerk0 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([statPerk0]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[statPerk0]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.statPerk0</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[statPerk1 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([statPerk1]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[statPerk1]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.statPerk1</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[statPerk2 per stats]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([statPerk2]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at stats level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[statPerk2]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.statPerk2</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Summoner Id' datatype='string' name='[summonerId]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>participantIdentities.Value.player.summonerId</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Summoner Name' datatype='string' name='[summonerName]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>participantIdentities.Value.player.summonerName</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='real' name='[teamId (participants)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>participants.Value.teamId</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='real' name='[teamId (teams)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>teams.Value.teamId</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[teams Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>teams.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Time C Cing Others' datatype='real' name='[timeCCingOthers]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.timeCCingOthers</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Total Damage Dealt To Champions' datatype='real' name='[totalDamageDealtToChampions]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.totalDamageDealtToChampions</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Total Damage Dealt' datatype='real' name='[totalDamageDealt]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.totalDamageDealt</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Total Damage Taken' datatype='real' name='[totalDamageTaken]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.totalDamageTaken</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Total Heal' datatype='real' name='[totalHeal]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.totalHeal</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Total Minions Killed' datatype='real' name='[totalMinionsKilled]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.totalMinionsKilled</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Total Player Score' datatype='real' name='[totalPlayerScore]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.totalPlayerScore</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Total Score Rank' datatype='real' name='[totalScoreRank]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.totalScoreRank</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Total Time Crowd Control Dealt' datatype='real' name='[totalTimeCrowdControlDealt]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.totalTimeCrowdControlDealt</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Total Units Healed' datatype='real' name='[totalUnitsHealed]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.totalUnitsHealed</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Tower Kills' datatype='real' name='[towerKills]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>teams.Value.towerKills</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Triple Kills' datatype='real' name='[tripleKills]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.tripleKills</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='True Damage Dealt To Champions' datatype='real' name='[trueDamageDealtToChampions]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.trueDamageDealtToChampions</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='True Damage Dealt' datatype='real' name='[trueDamageDealt]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.trueDamageDealt</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='True Damage Taken' datatype='real' name='[trueDamageTaken]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.trueDamageTaken</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Turret Kills' datatype='real' name='[turretKills]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.turretKills</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Unreal Kills' datatype='real' name='[unrealKills]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.unrealKills</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Vilemaw Kills' datatype='real' name='[vilemawKills]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>teams.Value.vilemawKills</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Vision Score' datatype='real' name='[visionScore]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.visionScore</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Vision Wards Bought In Game' datatype='real' name='[visionWardsBoughtInGame]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.visionWardsBoughtInGame</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Wards Killed' datatype='real' name='[wardsKilled]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.wardsKilled</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Wards Placed' datatype='real' name='[wardsPlaced]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.wardsPlaced</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Win (Participants.Stats)' datatype='boolean' name='[win (participants.stats)]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>participants.Value.stats.win</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Win (Teams)' datatype='string' name='[win (teams)]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>teams.Value.win</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='Bans' role='dimensions'>
        <folder-item name='[bans Index (generated)]' type='field' />
        <folder-item name='[championId (teams.bans)]' type='field' />
      </folder>
      <folder name='Output' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[gameId]' type='field' />
        <folder-item name='[gameMode]' type='field' />
        <folder-item name='[gameType]' type='field' />
        <folder-item name='[gameVersion]' type='field' />
        <folder-item name='[mapId]' type='field' />
        <folder-item name='[platformId]' type='field' />
        <folder-item name='[queueId]' type='field' />
        <folder-item name='[seasonId]' type='field' />
      </folder>
      <folder name='Participant Identities' role='dimensions'>
        <folder-item name='[participantId (participantIdentities)]' type='field' />
        <folder-item name='[participantIdentities Index (generated)]' type='field' />
      </folder>
      <folder name='Participants' role='dimensions'>
        <folder-item name='[championId (participants)]' type='field' />
        <folder-item name='[highestAchievedSeasonTier]' type='field' />
        <folder-item name='[participantId (participants)]' type='field' />
        <folder-item name='[participants Index (generated)]' type='field' />
        <folder-item name='[spell1Id]' type='field' />
        <folder-item name='[spell2Id]' type='field' />
        <folder-item name='[teamId (participants)]' type='field' />
      </folder>
      <folder name='Player' role='dimensions'>
        <folder-item name='[accountId]' type='field' />
        <folder-item name='[currentAccountId]' type='field' />
        <folder-item name='[currentPlatformId]' type='field' />
        <folder-item name='[matchHistoryUri]' type='field' />
        <folder-item name='[platformId (participantIdentities.player)]' type='field' />
        <folder-item name='[summonerId]' type='field' />
        <folder-item name='[summonerName]' type='field' />
      </folder>
      <folder name='Stats' role='dimensions'>
        <folder-item name='[firstBloodAssist]' type='field' />
        <folder-item name='[firstBloodKill]' type='field' />
        <folder-item name='[firstTowerAssist]' type='field' />
        <folder-item name='[firstTowerKill]' type='field' />
        <folder-item name='[participantId (participants.stats)]' type='field' />
        <folder-item name='[win (participants.stats)]' type='field' />
      </folder>
      <folder name='Teams' role='dimensions'>
        <folder-item name='[firstBaron]' type='field' />
        <folder-item name='[firstBlood]' type='field' />
        <folder-item name='[firstDragon]' type='field' />
        <folder-item name='[firstInhibitor]' type='field' />
        <folder-item name='[firstRiftHerald]' type='field' />
        <folder-item name='[firstTower]' type='field' />
        <folder-item name='[teamId (teams)]' type='field' />
        <folder-item name='[teams Index (generated)]' type='field' />
        <folder-item name='[win (teams)]' type='field' />
      </folder>
      <folder name='Timeline' role='dimensions'>
        <folder-item name='[lane]' type='field' />
        <folder-item name='[participantId (participants.timeline)]' type='field' />
        <folder-item name='[role]' type='field' />
      </folder>
      <folder name='Source Measures' role='measures'>
        <folder-item name='[0-10 (participants.timeline.creepsPerMinDeltas)]' type='field' />
        <folder-item name='[0-10 (participants.timeline.csDiffPerMinDeltas)]' type='field' />
        <folder-item name='[0-10 (participants.timeline.damageTakenDiffPerMinDeltas)]' type='field' />
        <folder-item name='[0-10 (participants.timeline.damageTakenPerMinDeltas)]' type='field' />
        <folder-item name='[0-10 (participants.timeline.goldPerMinDeltas)]' type='field' />
        <folder-item name='[0-10 (participants.timeline.xpDiffPerMinDeltas)]' type='field' />
        <folder-item name='[0-10 (participants.timeline.xpPerMinDeltas)]' type='field' />
        <folder-item name='[10-20 (participants.timeline.creepsPerMinDeltas)]' type='field' />
        <folder-item name='[10-20 (participants.timeline.csDiffPerMinDeltas)]' type='field' />
        <folder-item name='[10-20 (participants.timeline.damageTakenDiffPerMinDeltas)]' type='field' />
        <folder-item name='[10-20 (participants.timeline.damageTakenPerMinDeltas)]' type='field' />
        <folder-item name='[10-20 (participants.timeline.goldPerMinDeltas)]' type='field' />
        <folder-item name='[10-20 (participants.timeline.xpDiffPerMinDeltas)]' type='field' />
        <folder-item name='[10-20 (participants.timeline.xpPerMinDeltas)]' type='field' />
        <folder-item name='[assists]' type='field' />
        <folder-item name='[baronKills]' type='field' />
        <folder-item name='[champLevel]' type='field' />
        <folder-item name='[combatPlayerScore]' type='field' />
        <folder-item name='[damageDealtToObjectives]' type='field' />
        <folder-item name='[damageDealtToTurrets]' type='field' />
        <folder-item name='[damageSelfMitigated]' type='field' />
        <folder-item name='[deaths]' type='field' />
        <folder-item name='[dominionVictoryScore]' type='field' />
        <folder-item name='[doubleKills]' type='field' />
        <folder-item name='[dragonKills]' type='field' />
        <folder-item name='[gameCreation]' type='field' />
        <folder-item name='[gameDuration]' type='field' />
        <folder-item name='[goldEarned]' type='field' />
        <folder-item name='[goldSpent]' type='field' />
        <folder-item name='[inhibitorKills (participants.stats)]' type='field' />
        <folder-item name='[inhibitorKills (teams)]' type='field' />
        <folder-item name='[item0]' type='field' />
        <folder-item name='[item1]' type='field' />
        <folder-item name='[item2]' type='field' />
        <folder-item name='[item3]' type='field' />
        <folder-item name='[item4]' type='field' />
        <folder-item name='[item5]' type='field' />
        <folder-item name='[item6]' type='field' />
        <folder-item name='[killingSprees]' type='field' />
        <folder-item name='[kills]' type='field' />
        <folder-item name='[largestCriticalStrike]' type='field' />
        <folder-item name='[largestKillingSpree]' type='field' />
        <folder-item name='[largestMultiKill]' type='field' />
        <folder-item name='[longestTimeSpentLiving]' type='field' />
        <folder-item name='[magicDamageDealtToChampions]' type='field' />
        <folder-item name='[magicDamageDealt]' type='field' />
        <folder-item name='[magicalDamageTaken]' type='field' />
        <folder-item name='[neutralMinionsKilledEnemyJungle]' type='field' />
        <folder-item name='[neutralMinionsKilledTeamJungle]' type='field' />
        <folder-item name='[neutralMinionsKilled]' type='field' />
        <folder-item name='[objectivePlayerScore]' type='field' />
        <folder-item name='[pentaKills]' type='field' />
        <folder-item name='[perk0Var1]' type='field' />
        <folder-item name='[perk0Var2]' type='field' />
        <folder-item name='[perk0Var3]' type='field' />
        <folder-item name='[perk0]' type='field' />
        <folder-item name='[perk1Var1]' type='field' />
        <folder-item name='[perk1Var2]' type='field' />
        <folder-item name='[perk1Var3]' type='field' />
        <folder-item name='[perk1]' type='field' />
        <folder-item name='[perk2Var1]' type='field' />
        <folder-item name='[perk2Var2]' type='field' />
        <folder-item name='[perk2Var3]' type='field' />
        <folder-item name='[perk2]' type='field' />
        <folder-item name='[perk3Var1]' type='field' />
        <folder-item name='[perk3Var2]' type='field' />
        <folder-item name='[perk3Var3]' type='field' />
        <folder-item name='[perk3]' type='field' />
        <folder-item name='[perk4Var1]' type='field' />
        <folder-item name='[perk4Var2]' type='field' />
        <folder-item name='[perk4Var3]' type='field' />
        <folder-item name='[perk4]' type='field' />
        <folder-item name='[perk5Var1]' type='field' />
        <folder-item name='[perk5Var2]' type='field' />
        <folder-item name='[perk5Var3]' type='field' />
        <folder-item name='[perk5]' type='field' />
        <folder-item name='[perkPrimaryStyle]' type='field' />
        <folder-item name='[perkSubStyle]' type='field' />
        <folder-item name='[physicalDamageDealtToChampions]' type='field' />
        <folder-item name='[physicalDamageDealt]' type='field' />
        <folder-item name='[physicalDamageTaken]' type='field' />
        <folder-item name='[pickTurn]' type='field' />
        <folder-item name='[playerScore0]' type='field' />
        <folder-item name='[playerScore1]' type='field' />
        <folder-item name='[playerScore2]' type='field' />
        <folder-item name='[playerScore3]' type='field' />
        <folder-item name='[playerScore4]' type='field' />
        <folder-item name='[playerScore5]' type='field' />
        <folder-item name='[playerScore6]' type='field' />
        <folder-item name='[playerScore7]' type='field' />
        <folder-item name='[playerScore8]' type='field' />
        <folder-item name='[playerScore9]' type='field' />
        <folder-item name='[profileIcon]' type='field' />
        <folder-item name='[quadraKills]' type='field' />
        <folder-item name='[riftHeraldKills]' type='field' />
        <folder-item name='[sightWardsBoughtInGame]' type='field' />
        <folder-item name='[statPerk0]' type='field' />
        <folder-item name='[statPerk1]' type='field' />
        <folder-item name='[statPerk2]' type='field' />
        <folder-item name='[timeCCingOthers]' type='field' />
        <folder-item name='[totalDamageDealtToChampions]' type='field' />
        <folder-item name='[totalDamageDealt]' type='field' />
        <folder-item name='[totalDamageTaken]' type='field' />
        <folder-item name='[totalHeal]' type='field' />
        <folder-item name='[totalMinionsKilled]' type='field' />
        <folder-item name='[totalPlayerScore]' type='field' />
        <folder-item name='[totalScoreRank]' type='field' />
        <folder-item name='[totalTimeCrowdControlDealt]' type='field' />
        <folder-item name='[totalUnitsHealed]' type='field' />
        <folder-item name='[towerKills]' type='field' />
        <folder-item name='[tripleKills]' type='field' />
        <folder-item name='[trueDamageDealtToChampions]' type='field' />
        <folder-item name='[trueDamageDealt]' type='field' />
        <folder-item name='[trueDamageTaken]' type='field' />
        <folder-item name='[turretKills]' type='field' />
        <folder-item name='[unrealKills]' type='field' />
        <folder-item name='[vilemawKills]' type='field' />
        <folder-item name='[visionScore]' type='field' />
        <folder-item name='[visionWardsBoughtInGame]' type='field' />
        <folder-item name='[wardsKilled]' type='field' />
        <folder-item name='[wardsPlaced]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.636115' measure-ordering='alphabetic' measure-percentage='0.363885' show-structure='false' user-set-layout='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <datasource-relationships>
    <datasource-dependencies datasource='federated.0s6bm4a1csz1pw19fp66k0saquyu'>
      <column-instance column='[participantId]' derivation='None' name='[none:participantId:ok]' pivot='key' type='ordinal' />
      <column caption='Participant Id' datatype='real' name='[participantId]' role='dimension' type='ordinal' />
    </datasource-dependencies>
    <datasource-dependencies datasource='federated.10373q2145vnmg1cax36k12suecu'>
      <column-instance column='[participantId]' derivation='None' name='[none:participantId:ok]' pivot='key' type='ordinal' />
      <column caption='Participant Id' datatype='integer' name='[participantId]' role='dimension' type='ordinal' />
    </datasource-dependencies>
    <datasource-relationship source='federated.0s6bm4a1csz1pw19fp66k0saquyu' target='federated.10373q2145vnmg1cax36k12suecu'>
      <column-mapping>
        <map key='[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:participantId:ok]' value='[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]' />
      </column-mapping>
    </datasource-relationship>
  </datasource-relationships>
  <worksheets>
    <worksheet name='Location'>
      <table>
        <view>
          <datasources>
            <datasource caption='partFrame' name='federated.10373q2145vnmg1cax36k12suecu' />
          </datasources>
          <datasource-dependencies datasource='federated.10373q2145vnmg1cax36k12suecu'>
            <column-instance column='[participantId]' derivation='None' name='[none:participantId:ok]' pivot='key' type='ordinal' />
            <column-instance column='[timestamp]' derivation='None' name='[none:timestamp:ok]' pivot='key' type='ordinal' />
            <column-instance column='[x]' derivation='None' name='[none:x:qk]' pivot='key' type='quantitative' />
            <column-instance column='[y]' derivation='None' name='[none:y:qk]' pivot='key' type='quantitative' />
            <column caption='Participant Id' datatype='integer' name='[participantId]' role='dimension' type='ordinal' />
            <column caption='Timestamp' datatype='integer' name='[timestamp]' role='measure' type='quantitative' />
            <column datatype='real' name='[x]' role='measure' type='quantitative' />
            <column datatype='real' name='[y]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:participantId:ok]' member='1' />
              <groupfilter function='member' level='[none:participantId:ok]' member='2' />
              <groupfilter function='member' level='[none:participantId:ok]' member='3' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.10373q2145vnmg1cax36k12suecu].[none:x:qk]' included-values='non-null' />
          <slices>
            <column>[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]</column>
            <column>[federated.10373q2145vnmg1cax36k12suecu].[none:x:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='5' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Multipolygon' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]' />
              <geometry column='[federated.10373q2145vnmg1cax36k12suecu].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='14.547999382019043' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.10373q2145vnmg1cax36k12suecu].[none:y:qk]</rows>
        <cols>[federated.10373q2145vnmg1cax36k12suecu].[none:x:qk]</cols>
        <pages>
          <column>[federated.10373q2145vnmg1cax36k12suecu].[none:timestamp:ok]</column>
        </pages>
        <page-trail-options enabled='true' mark-type='all' />
      </table>
    </worksheet>
    <worksheet name='Map of Player Position'>
      <table>
        <view>
          <datasources>
            <datasource caption='partFrame' name='federated.10373q2145vnmg1cax36k12suecu' />
          </datasources>
          <datasource-dependencies datasource='federated.10373q2145vnmg1cax36k12suecu'>
            <column-instance column='[timestamp]' derivation='Attribute' name='[attr:timestamp:qk]' pivot='key' type='quantitative' />
            <column-instance column='[participantId]' derivation='None' name='[none:participantId:ok]' pivot='key' type='ordinal' />
            <column-instance column='[x]' derivation='None' name='[none:x:qk]' pivot='key' type='quantitative' />
            <column-instance column='[y]' derivation='None' name='[none:y:qk]' pivot='key' type='quantitative' />
            <column caption='Participant Id' datatype='integer' name='[participantId]' role='dimension' type='ordinal' />
            <column-instance column='[timestamp]' derivation='Sum' name='[sum:timestamp:qk]' pivot='key' type='quantitative' />
            <column caption='Timestamp' datatype='integer' name='[timestamp]' role='measure' type='quantitative' />
            <column datatype='real' name='[x]' role='measure' type='quantitative' />
            <column datatype='real' name='[y]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.10373q2145vnmg1cax36k12suecu].[attr:timestamp:qk]' included-values='in-range'>
            <min>0</min>
            <max>1260397</max>
          </filter>
          <slices>
            <column>[federated.10373q2145vnmg1cax36k12suecu].[attr:timestamp:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.10373q2145vnmg1cax36k12suecu].[none:x:qk]' field-type='quantitative' max='15649.169699903954' min='-623.86812668358016' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.10373q2145vnmg1cax36k12suecu].[none:y:qk]' field-type='quantitative' max='15693.179908511696' min='-579.85791807583973' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mapped-image'>
            <format attr='enabled' id='[federated.0s6bm4a1csz1pw19fp66k0saquyu].[MappedImage1]' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.2853591442108154' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.10373q2145vnmg1cax36k12suecu].[none:y:qk]</rows>
        <cols>[federated.10373q2145vnmg1cax36k12suecu].[none:x:qk]</cols>
        <mark-labels>
          <mark-label id='1'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.10373q2145vnmg1cax36k12suecu].[none:x:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.10373q2145vnmg1cax36k12suecu].[none:y:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[none:x:qk]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[none:y:qk]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[sum:timestamp:qk]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[Geometry (generated)]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>1</value>
                <value>12012.0</value>
                <value>2024.0</value>
                <value>120035</value>
                <value>%null%</value>
              </tuple>
            </tuple-reference>
            <label-position x='0.375' y='-14' />
          </mark-label>
        </mark-labels>
      </table>
    </worksheet>
    <worksheet name='Map of Player Position (2)'>
      <table>
        <view>
          <datasources>
            <datasource caption='partFrame' name='federated.10373q2145vnmg1cax36k12suecu' />
            <datasource caption='eventFrame' name='federated.0s6bm4a1csz1pw19fp66k0saquyu' />
          </datasources>
          <datasource-dependencies datasource='federated.0s6bm4a1csz1pw19fp66k0saquyu'>
            <column-instance column='[type]' derivation='None' name='[none:type:nk]' pivot='key' type='nominal' />
            <column-instance column='[x]' derivation='None' name='[none:x:qk]' pivot='key' type='quantitative' />
            <column-instance column='[y]' derivation='None' name='[none:y:qk]' pivot='key' type='quantitative' />
            <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
            <column datatype='real' name='[x]' role='measure' type='quantitative' />
            <column datatype='real' name='[y]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.10373q2145vnmg1cax36k12suecu' />
          <filter class='categorical' column='[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:type:nk]'>
            <groupfilter function='member' level='[none:type:nk]' member='&quot;CHAMPION_KILL&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mapped-image'>
            <format attr='enabled' id='[federated.0s6bm4a1csz1pw19fp66k0saquyu].[MappedImage1]' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Multipolygon' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <geometry column='[federated.10373q2145vnmg1cax36k12suecu].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.2853591442108154' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:x:qk]</rows>
        <cols>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:y:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Sheet 10'>
      <table>
        <view>
          <datasources>
            <datasource name='Clipboard_20190118T224953' />
          </datasources>
          <datasource-dependencies datasource='Clipboard_20190118T224953'>
            <column datatype='boolean' name='[(Killer Id) &lt; 6]' role='dimension' type='nominal' />
            <column-instance column='[(Killer Id) &lt; 6]' derivation='None' name='[none:(Killer Id) &lt; 6:nk]' pivot='key' type='nominal' />
            <column-instance column='[x]' derivation='Sum' name='[sum:x:qk]' pivot='key' type='quantitative' />
            <column-instance column='[y]' derivation='Sum' name='[sum:y:qk]' pivot='key' type='quantitative' />
            <column caption='X' datatype='integer' name='[x]' role='measure' type='quantitative' />
            <column caption='Y' datatype='integer' name='[y]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[Clipboard_20190118T224953].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[Clipboard_20190118T224953].[sum:x:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[Clipboard_20190118T224953].[sum:y:qk]&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[Clipboard_20190118T224953].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[Clipboard_20190118T224953].[Multiple Values]' />
            </encodings>
          </pane>
        </panes>
        <rows>[Clipboard_20190118T224953].[none:(Killer Id) &lt; 6:nk]</rows>
        <cols>[Clipboard_20190118T224953].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='Sheet 13'>
      <table>
        <view>
          <datasources>
            <datasource caption='partFrame' name='federated.10373q2145vnmg1cax36k12suecu' />
          </datasources>
          <datasource-dependencies datasource='federated.10373q2145vnmg1cax36k12suecu'>
            <column-instance column='[participantId]' derivation='None' name='[none:participantId:ok]' pivot='key' type='ordinal' />
            <column-instance column='[timestamp]' derivation='None' name='[none:timestamp:qk]' pivot='key' type='quantitative' />
            <column-instance column='[xp]' derivation='None' name='[none:xp:qk]' pivot='key' type='quantitative' />
            <column caption='Participant Id' datatype='integer' name='[participantId]' role='dimension' type='ordinal' />
            <column caption='Timestamp' datatype='integer' name='[timestamp]' role='measure' type='quantitative' />
            <column caption='Xp' datatype='integer' name='[xp]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.10373q2145vnmg1cax36k12suecu].[none:xp:qk]</rows>
        <cols>[federated.10373q2145vnmg1cax36k12suecu].[none:timestamp:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Sheet 14'>
      <table>
        <view>
          <datasources>
            <datasource caption='output' name='federated.18wdjif1x9zqlg12wdpxf0qhaojx' />
          </datasources>
          <datasource-dependencies datasource='federated.18wdjif1x9zqlg12wdpxf0qhaojx'>
            <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>Document Index (generated)</run>
                </formatted-text>
              </desc>
            </column>
            <column datatype='real' is-auto-gen-lod-field='true' name='[Physical Damage Dealt per stats]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([physicalDamageDealt]) }' />
              <desc>
                <formatted-text>
                  <run>A calculated measure that is at stats level of detail</run>
                </formatted-text>
              </desc>
            </column>
            <column datatype='real' is-auto-gen-lod-field='true' name='[Wards Placed per stats]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[participants Index (generated)] : MAX([wardsPlaced]) }' />
              <desc>
                <formatted-text>
                  <run>A calculated measure that is at stats level of detail</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Lane' datatype='string' name='[lane]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>participants.Value.timeline.lane</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Physical Damage Dealt per stats]' derivation='None' name='[none:Physical Damage Dealt per stats:qk]' pivot='key' type='quantitative' />
            <column-instance column='[lane]' derivation='None' name='[none:lane:nk]' pivot='key' type='nominal' />
            <column aggregation='Sum' datatype='integer' name='[participants Index (generated)]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>participants.Index (generated)</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Physical Damage Dealt' datatype='real' name='[physicalDamageDealt]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>participants.Value.stats.physicalDamageDealt</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Wards Placed per stats]' derivation='Sum' name='[sum:Wards Placed per stats:qk]' pivot='key' type='quantitative' />
            <column caption='Wards Placed' datatype='real' name='[wardsPlaced]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>participants.Value.stats.wardsPlaced</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.18wdjif1x9zqlg12wdpxf0qhaojx].[none:Physical Damage Dealt per stats:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.18wdjif1x9zqlg12wdpxf0qhaojx].[sum:Wards Placed per stats:qk]</rows>
        <cols>[federated.18wdjif1x9zqlg12wdpxf0qhaojx].[none:lane:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Sheet 4'>
      <table>
        <view>
          <datasources>
            <datasource caption='eventFrame' name='federated.0s6bm4a1csz1pw19fp66k0saquyu' />
          </datasources>
          <datasource-dependencies datasource='federated.0s6bm4a1csz1pw19fp66k0saquyu'>
            <column caption='Killer Id' datatype='real' name='[killerId]' role='dimension' type='ordinal' />
            <column-instance column='[killerId]' derivation='None' name='[none:killerId:ok]' pivot='key' type='ordinal' />
            <column-instance column='[type]' derivation='None' name='[none:type:nk]' pivot='key' type='nominal' />
            <column-instance column='[x]' derivation='None' name='[none:x:qk]' pivot='key' type='quantitative' />
            <column-instance column='[y]' derivation='None' name='[none:y:qk]' pivot='key' type='quantitative' />
            <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
            <column datatype='real' name='[x]' role='measure' type='quantitative' />
            <column datatype='real' name='[y]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:killerId:ok]'>
            <groupfilter function='member' level='[none:killerId:ok]' member='1.0' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:type:nk]'>
            <groupfilter function='member' level='[none:type:nk]' member='&quot;CHAMPION_KILL&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:type:nk]</column>
            <column>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:killerId:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Multipolygon' />
            <encodings>
              <geometry column='[federated.0s6bm4a1csz1pw19fp66k0saquyu].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:y:qk]</rows>
        <cols>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:x:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Sheet 5'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Kills By Player</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='eventFrame' name='federated.0s6bm4a1csz1pw19fp66k0saquyu' />
          </datasources>
          <datasource-dependencies datasource='federated.0s6bm4a1csz1pw19fp66k0saquyu'>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column-instance column='[Number of Records]' derivation='Count' name='[cnt:Number of Records:qk]' pivot='key' type='quantitative' />
            <column caption='Killer Id' datatype='real' name='[killerId]' role='dimension' type='ordinal' />
            <column-instance column='[killerId]' derivation='None' name='[none:killerId:ok]' pivot='key' type='ordinal' />
            <column-instance column='[type]' derivation='None' name='[none:type:nk]' pivot='key' type='nominal' />
            <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:killerId:ok]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:killerId:ok]' />
              <groupfilter function='member' level='[none:killerId:ok]' member='%null%' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:type:nk]'>
            <groupfilter function='member' level='[none:type:nk]' member='&quot;CHAMPION_KILL&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:killerId:ok]</column>
            <column>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='worksheet'>
            <format attr='in-tooltip' field='[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:killerId:ok]' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:killerId:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#4e79a7' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[cnt:Number of Records:qk]</rows>
        <cols>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:killerId:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='Sheet 6'>
      <table>
        <view>
          <datasources>
            <datasource caption='partFrame' name='federated.10373q2145vnmg1cax36k12suecu' />
          </datasources>
          <datasource-dependencies datasource='federated.10373q2145vnmg1cax36k12suecu'>
            <column caption='[Participant Id] &lt; 6' datatype='boolean' name='[Calculation_945474464567660559]' role='dimension' type='nominal' user:unnamed='Sheet 6'>
              <calculation class='tableau' formula='[participantId] &lt; 6' />
            </column>
            <column caption='Current Gold' datatype='integer' name='[currentGold]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_945474464567660559]' derivation='None' name='[none:Calculation_945474464567660559:nk]' pivot='key' type='nominal' />
            <column-instance column='[timestamp]' derivation='None' name='[none:timestamp:qk]' pivot='key' type='quantitative' />
            <column caption='Participant Id' datatype='integer' name='[participantId]' role='dimension' type='ordinal' />
            <column-instance column='[currentGold]' derivation='Sum' name='[sum:currentGold:qk]' pivot='key' type='quantitative' />
            <column caption='Timestamp' datatype='integer' name='[timestamp]' role='measure' type='quantitative' />
            <style />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.10373q2145vnmg1cax36k12suecu].[none:Calculation_945474464567660559:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.10373q2145vnmg1cax36k12suecu].[sum:currentGold:qk]</rows>
        <cols>[federated.10373q2145vnmg1cax36k12suecu].[none:timestamp:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Sheet 8'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Kills by Team&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='eventFrame' name='federated.0s6bm4a1csz1pw19fp66k0saquyu' />
          </datasources>
          <datasource-dependencies datasource='federated.0s6bm4a1csz1pw19fp66k0saquyu'>
            <column caption='[Killer Id] &lt; 6' datatype='boolean' name='[Calculation_945474464573530131]' role='dimension' type='nominal' user:unnamed='Sheet 8'>
              <calculation class='tableau' formula='[killerId] &lt; 6' />
            </column>
            <column caption='Killer Id' datatype='real' name='[killerId]' role='dimension' type='ordinal' />
            <column-instance column='[Calculation_945474464573530131]' derivation='None' name='[none:Calculation_945474464573530131:nk]' pivot='key' type='nominal' />
            <column-instance column='[type]' derivation='None' name='[none:type:nk]' pivot='key' type='nominal' />
            <column-instance column='[x]' derivation='None' name='[none:x:qk]' pivot='key' type='quantitative' />
            <column-instance column='[y]' derivation='None' name='[none:y:qk]' pivot='key' type='quantitative' />
            <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
            <column datatype='real' name='[x]' role='measure' type='quantitative' />
            <column datatype='real' name='[y]' role='measure' type='quantitative' />
            <style>
              <style-rule element='mark'>
                <encoding attr='color' field='[none:Calculation_945474464573530131:nk]' palette='color_blind_10_0' type='palette'>
                  <map to='#1170aa'>
                    <bucket>false</bucket>
                  </map>
                  <map to='#4e79a7'>
                    <bucket>%null%</bucket>
                  </map>
                  <map to='#fc7d0b'>
                    <bucket>true</bucket>
                  </map>
                </encoding>
              </style-rule>
            </style>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:type:nk]'>
            <groupfilter function='member' level='[none:type:nk]' member='&quot;CHAMPION_KILL&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='header'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='label'>
            <format attr='color' scope='rows' value='#9d7660' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='background-color' data-class='total' value='#666666' />
            <format attr='background-color' data-class='subtotal' value='#1b1b1b' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='cols' value='5' />
            <format attr='band-size' scope='rows' value='5' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:Calculation_945474464573530131:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.3953038454055786' />
                <format attr='mark-color' value='#e10000' />
                <format attr='mark-transparency' value='255' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:x:qk]</rows>
        <cols>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:y:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Sheet 8 (2)'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Kills by Player&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='eventFrame' name='federated.0s6bm4a1csz1pw19fp66k0saquyu' />
          </datasources>
          <datasource-dependencies datasource='federated.0s6bm4a1csz1pw19fp66k0saquyu'>
            <column caption='Killer Id' datatype='real' name='[killerId]' role='dimension' type='ordinal' />
            <column-instance column='[killerId]' derivation='None' name='[none:killerId:ok]' pivot='key' type='ordinal' />
            <column-instance column='[type]' derivation='None' name='[none:type:nk]' pivot='key' type='nominal' />
            <column-instance column='[x]' derivation='None' name='[none:x:qk]' pivot='key' type='quantitative' />
            <column-instance column='[y]' derivation='None' name='[none:y:qk]' pivot='key' type='quantitative' />
            <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
            <column datatype='real' name='[x]' role='measure' type='quantitative' />
            <column datatype='real' name='[y]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:type:nk]'>
            <groupfilter function='member' level='[none:type:nk]' member='&quot;CHAMPION_KILL&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:y:qk]' field-type='quantitative' max='15000.000000000002' min='-113.69598372821201' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:x:qk]' field-type='quantitative' max='15056.847991864106' min='-56.847991864106916' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='header'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
          <style-rule element='label'>
            <format attr='color' scope='rows' value='#9d7660' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='background-color' data-class='total' value='#666666' />
            <format attr='background-color' data-class='subtotal' value='#1b1b1b' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='cols' value='5' />
            <format attr='band-size' scope='rows' value='5' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:killerId:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='2.3756906986236572' />
                <format attr='mark-color' value='#e10000' />
                <format attr='mark-transparency' value='255' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:x:qk]</rows>
        <cols>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:y:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Sheet 9'>
      <table>
        <view>
          <datasources>
            <datasource caption='partFrame' name='federated.10373q2145vnmg1cax36k12suecu' />
          </datasources>
          <datasource-dependencies datasource='federated.10373q2145vnmg1cax36k12suecu'>
            <column caption='[Participant Id] &lt; 6' datatype='boolean' name='[Calculation_1112107651049881600]' role='dimension' type='nominal' user:unnamed='Sheet 9'>
              <calculation class='tableau' formula='[participantId] &lt; 6' />
            </column>
            <column caption='CS' datatype='integer' name='[Calculation_945474464548577281]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[jungleMinionsKilled]+[minionsKilled]' />
            </column>
            <column caption='Jungle Minions Killed' datatype='integer' name='[jungleMinionsKilled]' role='measure' type='quantitative' />
            <column caption='Level' datatype='integer' name='[level]' role='measure' type='quantitative' />
            <column caption='Minions Killed' datatype='integer' name='[minionsKilled]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_1112107651049881600]' derivation='None' name='[none:Calculation_1112107651049881600:nk]' pivot='key' type='nominal' />
            <column-instance column='[timestamp]' derivation='None' name='[none:timestamp:qk]' pivot='key' type='quantitative' />
            <column caption='Participant Id' datatype='integer' name='[participantId]' role='dimension' type='ordinal' />
            <column-instance column='[Calculation_945474464548577281]' derivation='Sum' name='[sum:Calculation_945474464548577281:qk]' pivot='key' type='quantitative' />
            <column-instance column='[level]' derivation='Sum' name='[sum:level:qk]' pivot='key' type='quantitative' />
            <column-instance column='[totalGold]' derivation='Sum' name='[sum:totalGold:qk]' pivot='key' type='quantitative' />
            <column caption='Timestamp' datatype='integer' name='[timestamp]' role='measure' type='quantitative' />
            <column caption='Total Gold' datatype='integer' name='[totalGold]' role='measure' type='quantitative' />
            <style />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.10373q2145vnmg1cax36k12suecu].[none:Calculation_1112107651049881600:nk]' />
            </encodings>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.10373q2145vnmg1cax36k12suecu].[sum:Calculation_945474464548577281:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.10373q2145vnmg1cax36k12suecu].[none:Calculation_1112107651049881600:nk]' />
            </encodings>
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.10373q2145vnmg1cax36k12suecu].[sum:totalGold:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.10373q2145vnmg1cax36k12suecu].[none:Calculation_1112107651049881600:nk]' />
            </encodings>
          </pane>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.10373q2145vnmg1cax36k12suecu].[sum:level:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.10373q2145vnmg1cax36k12suecu].[none:Calculation_1112107651049881600:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.10373q2145vnmg1cax36k12suecu].[sum:Calculation_945474464548577281:qk] + ([federated.10373q2145vnmg1cax36k12suecu].[sum:totalGold:qk] + [federated.10373q2145vnmg1cax36k12suecu].[sum:level:qk]))</rows>
        <cols>[federated.10373q2145vnmg1cax36k12suecu].[none:timestamp:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Summoner CS Count'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Summoner CS Count</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='partFrame' name='federated.10373q2145vnmg1cax36k12suecu' />
          </datasources>
          <datasource-dependencies datasource='federated.10373q2145vnmg1cax36k12suecu'>
            <column caption='CS' datatype='integer' name='[Calculation_945474464548577281]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[jungleMinionsKilled]+[minionsKilled]' />
            </column>
            <column caption='Jungle Minions Killed' datatype='integer' name='[jungleMinionsKilled]' role='measure' type='quantitative' />
            <column caption='Minions Killed' datatype='integer' name='[minionsKilled]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_945474464548577281]' derivation='None' name='[none:Calculation_945474464548577281:qk]' pivot='key' type='quantitative' />
            <column-instance column='[participantId]' derivation='None' name='[none:participantId:ok]' pivot='key' type='ordinal' />
            <column-instance column='[timestamp]' derivation='None' name='[none:timestamp:qk]' pivot='key' type='quantitative' />
            <column caption='Participant Id' datatype='integer' name='[participantId]' role='dimension' type='ordinal' />
            <column caption='Timestamp' datatype='integer' name='[timestamp]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.10373q2145vnmg1cax36k12suecu].[none:Calculation_945474464548577281:qk]</rows>
        <cols>[federated.10373q2145vnmg1cax36k12suecu].[none:timestamp:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Uknown'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Average Player Location</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='partFrame' name='federated.10373q2145vnmg1cax36k12suecu' />
          </datasources>
          <datasource-dependencies datasource='federated.10373q2145vnmg1cax36k12suecu'>
            <column-instance column='[x]' derivation='Avg' name='[avg:x:qk]' pivot='key' type='quantitative' />
            <column-instance column='[y]' derivation='Avg' name='[avg:y:qk]' pivot='key' type='quantitative' />
            <column-instance column='[participantId]' derivation='None' name='[none:participantId:ok]' pivot='key' type='ordinal' />
            <column caption='Participant Id' datatype='integer' name='[participantId]' role='dimension' type='ordinal' />
            <column datatype='real' name='[x]' role='measure' type='quantitative' />
            <column datatype='real' name='[y]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='header'>
            <format attr='background-color' field='[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]' value='#000000' />
            <format attr='font-size' data-class='subtotal' field='[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]' value='36' />
          </style-rule>
          <style-rule element='label'>
            <format attr='vertical-align' field='[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]' value='top' />
            <format attr='text-align' field='[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]' value='left' />
            <format attr='text-orientation' field='[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]' value='90' />
            <format attr='font-size' field='[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]' value='18' />
            <format attr='text-format' field='[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]' value='N' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Multipolygon' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]' />
              <text column='[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]' />
              <geometry column='[federated.10373q2145vnmg1cax36k12suecu].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='14.547999382019043' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.10373q2145vnmg1cax36k12suecu].[avg:x:qk]</rows>
        <cols>[federated.10373q2145vnmg1cax36k12suecu].[avg:y:qk]</cols>
        <mark-labels>
          <mark-label id='0'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:y:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:x:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:x:qk]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:y:qk]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[Geometry (generated)]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>12169.142857142857</value>
                <value>5868.6190476190477</value>
                <value>10</value>
                <value>%null%</value>
              </tuple>
            </tuple-reference>
            <label-position x='0.625' y='14' />
          </mark-label>
          <mark-label id='1'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:y:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:x:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:x:qk]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:y:qk]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[Geometry (generated)]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>9194.6190476190477</value>
                <value>8769.4285714285706</value>
                <value>7</value>
                <value>%null%</value>
              </tuple>
            </tuple-reference>
            <label-position x='0.625' y='10' />
          </mark-label>
          <mark-label id='2'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:y:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:x:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:x:qk]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:y:qk]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[Geometry (generated)]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>8748.9523809523816</value>
                <value>8777.1904761904771</value>
                <value>9</value>
                <value>%null%</value>
              </tuple>
            </tuple-reference>
            <label-position x='7' y='-9' />
          </mark-label>
          <mark-label id='3'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:y:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:x:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:x:qk]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:y:qk]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[Geometry (generated)]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>11869.333333333334</value>
                <value>4380.3809523809523</value>
                <value>8</value>
                <value>%null%</value>
              </tuple>
            </tuple-reference>
            <label-position x='-7' y='0.875' />
          </mark-label>
          <mark-label id='4'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:y:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:x:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:x:qk]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:y:qk]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[Geometry (generated)]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>9790.8571428571431</value>
                <value>3046.0476190476193</value>
                <value>5</value>
                <value>%null%</value>
              </tuple>
            </tuple-reference>
            <label-position x='-5' y='0.75' />
          </mark-label>
          <mark-label id='5'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:y:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:x:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:x:qk]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:y:qk]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[Geometry (generated)]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>9091.9047619047615</value>
                <value>3117.9047619047619</value>
                <value>1</value>
                <value>%null%</value>
              </tuple>
            </tuple-reference>
            <label-position x='-5' y='-4' />
          </mark-label>
          <mark-label id='6'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:y:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:x:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:x:qk]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:y:qk]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[Geometry (generated)]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>5285.8571428571431</value>
                <value>12256.047619047618</value>
                <value>6</value>
                <value>%null%</value>
              </tuple>
            </tuple-reference>
            <label-position x='9' y='0.5' />
          </mark-label>
          <mark-label id='7'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:y:qk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:x:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:x:qk]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[avg:y:qk]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]</field>
                  <field>[federated.10373q2145vnmg1cax36k12suecu].[Geometry (generated)]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>3127.6190476190477</value>
                <value>9374.7619047619046</value>
                <value>3</value>
                <value>%null%</value>
              </tuple>
            </tuple-reference>
            <label-position x='9' y='0.125' />
          </mark-label>
        </mark-labels>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Dashboard 1'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='5' param='horz' type='layout-flow' w='82400' x='800' y='1000'>
            <zone h='98000' id='3' type='layout-basic' w='82400' x='800' y='1000'>
              <zone h='98000' id='1' name='Summoner CS Count' w='82400' x='800' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone h='98000' id='6' name='Summoner CS Count' pane-specification-id='3' param='[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]' type='color' w='16000' x='83200' y='1000'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows source-height='93'>
    <window class='worksheet' name='Uknown'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{ABEBC615-6AD3-4CC4-BD94-15B938CF3883}' />
    </window>
    <window class='worksheet' name='Location'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='5' param='[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]' type='color' />
            <card type='currpage' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>780235</bucket>
          </multibucket>
        </current-page>
        <highlight>
          <color-one-way>
            <field>[federated.10373q2145vnmg1cax36k12suecu].[attr:level:qk]</field>
            <field>[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]</field>
            <field>[federated.10373q2145vnmg1cax36k12suecu].[none:timestamp:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{2638000F-B746-4D75-A99E-ABAD0B946AD0}' />
    </window>
    <window class='worksheet' name='Summoner CS Count'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='3' param='[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.10373q2145vnmg1cax36k12suecu].[none:Calculation_945474464551559174:qk]</field>
            <field>[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]</field>
            <field>[federated.10373q2145vnmg1cax36k12suecu].[sum:level:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5497AC6B-F075-46B5-ACA1-18841D0EB969}' />
    </window>
    <window class='dashboard' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Summoner CS Count'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
      </viewpoints>
      <active id='6' />
      <simple-id uuid='{E659CC59-935C-4712-80AD-CAE865B65D09}' />
    </window>
    <window class='worksheet' name='Sheet 4'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:itemId:ok]</field>
            <field>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:killerId:ok]</field>
            <field>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:participantId:ok]</field>
            <field>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:position:nk]</field>
            <field>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:type:nk]</field>
            <field>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:wardType:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{368C44DA-4772-4F85-A5FE-BA44D0D196E3}' />
    </window>
    <window class='worksheet' name='Sheet 5'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:killerId:ok]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[attr:teamId:qk]</field>
            <field>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:killerId:ok]</field>
            <field>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:type:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{7520F4A7-EDBD-48C0-A06C-E5AEE6697620}' />
    </window>
    <window class='worksheet' name='Sheet 6'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='3' param='[federated.10373q2145vnmg1cax36k12suecu].[none:Calculation_945474464567660559:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:killerId:ok]</field>
            <field>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:participantId:ok]</field>
            <field>[federated.10373q2145vnmg1cax36k12suecu].[attr:currentGold:qk]</field>
            <field>[federated.10373q2145vnmg1cax36k12suecu].[none:Calculation_945474464567357450:qk]</field>
            <field>[federated.10373q2145vnmg1cax36k12suecu].[none:Calculation_945474464567369739:qk]</field>
            <field>[federated.10373q2145vnmg1cax36k12suecu].[none:Calculation_945474464567660559:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{70BFC55A-FE0E-4687-8D3A-21A6C32E7AC5}' />
    </window>
    <window class='worksheet' name='Map of Player Position'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='4' param='[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:participantId:ok]</field>
            <field>[federated.10373q2145vnmg1cax36k12suecu].[none:level:qk]</field>
            <field>[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]</field>
            <field>[federated.10373q2145vnmg1cax36k12suecu].[none:x:qk]</field>
            <field>[federated.10373q2145vnmg1cax36k12suecu].[none:y:qk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{CFF880A4-0CD2-4C17-8E1A-E80306E72492}' />
    </window>
    <window class='worksheet' name='Map of Player Position (2)'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:participantId:ok]</field>
            <field>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:type:nk]</field>
            <field>[federated.10373q2145vnmg1cax36k12suecu].[none:level:qk]</field>
            <field>[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]</field>
            <field>[federated.10373q2145vnmg1cax36k12suecu].[none:x:qk]</field>
            <field>[federated.10373q2145vnmg1cax36k12suecu].[none:y:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{403403D6-424A-4A9C-9081-C936BE25C9A8}' />
    </window>
    <window class='worksheet' name='Sheet 8'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:Calculation_945474464573530131:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:Calculation_945474464573530131:nk]</field>
            <field>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:type:nk]</field>
            <field>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[x (group)]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{18C291B8-FB80-4C42-A4C0-90FCF6F26A2B}' />
    </window>
    <window class='worksheet' name='Sheet 8 (2)'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
          <strip size='160'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:killerId:ok]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:killerId:ok]</field>
            <field>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:type:nk]</field>
            <field>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[x (group)]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{26C73FB1-F9FC-48FD-9C44-CB53AADC49C5}' />
    </window>
    <window class='worksheet' name='Sheet 9'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.10373q2145vnmg1cax36k12suecu].[none:Calculation_1112107651049881600:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:Calculation_945474464579477524:nk]</field>
            <field>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:killerId:ok]</field>
            <field>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:monsterSubType:nk]</field>
            <field>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:monsterType:nk]</field>
            <field>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:teamId:ok]</field>
            <field>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:timestamp:qk]</field>
            <field>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:type:nk]</field>
            <field>[federated.0s6bm4a1csz1pw19fp66k0saquyu].[none:victimId:ok]</field>
            <field>[federated.10373q2145vnmg1cax36k12suecu].[none:Calculation_1112107651049881600:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{1AFD95EB-F336-4A81-8660-75128BC544D7}' />
    </window>
    <window class='worksheet' name='Sheet 10'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{0E8AFCC3-E631-4429-A887-2A040C11398D}' />
    </window>
    <window class='worksheet' name='Sheet 13'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.10373q2145vnmg1cax36k12suecu].[none:participantId:ok]</field>
            <field>[federated.10373q2145vnmg1cax36k12suecu].[none:timestamp:qk]</field>
            <field>[federated.10373q2145vnmg1cax36k12suecu].[none:xp:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{8EF7B858-84D0-4EDB-8769-25027CC6F4B1}' />
    </window>
    <window class='worksheet' maximized='true' name='Sheet 14'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.18wdjif1x9zqlg12wdpxf0qhaojx].[none:Physical Damage Dealt per stats:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <tuple-selection>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.18wdjif1x9zqlg12wdpxf0qhaojx].[none:role:nk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.18wdjif1x9zqlg12wdpxf0qhaojx].[sum:Wards Placed per stats:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.18wdjif1x9zqlg12wdpxf0qhaojx].[none:role:nk]</field>
                  <field>[federated.18wdjif1x9zqlg12wdpxf0qhaojx].[sum:Wards Placed per stats:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;NONE&quot;</value>
                <value>7.0</value>
              </tuple>
            </tuple-reference>
          </tuple-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.18wdjif1x9zqlg12wdpxf0qhaojx].[none:Physical Damage Dealt per stats:qk]</field>
            <field>[federated.18wdjif1x9zqlg12wdpxf0qhaojx].[none:lane:nk]</field>
            <field>[federated.18wdjif1x9zqlg12wdpxf0qhaojx].[none:role:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{63DBC227-DB1F-4FF1-A0FB-DB8F962D885F}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Location' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Map of Player Position' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Map of Player Position (2)' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAC40lEQVR4nO3XsYrWWBiA4S8zgoXFFoKgW9l4NZbetBfgYuOAhbCCKCosDPrnbLNbKIPo
      7+gw8z5P9SVwwiHJC8m21loDUSfHLNIMN8VRAez7ftn7gCtxVABwUwiANAGQJgDSBECaAEgT
      AGkCIE0ApAmANAGQJgDSBECaAEgTAGkCIE0ApAmANAGQJgDSBECaAEgTAGkCIE0ApAmANAGQ
      JgDSBECaAEgTAGkCIE0ApAmANAGQJgDSBECaAEgTAGkCIE0ApAmANAGQJgDSBECaAEgTAGkC
      IE0ApAmANAGQJgDSBECaAEgTAGkCIE0ApAmANAGQJgDSBECaAEgTAGkCIE0ApAmANAGQJgDS
      BECaAEgTAGkCIE0ApAmANAGQJgDSBECaAEgTAGkCIE0ApAmANAGQJgDSBECaAEgTAGkXBvDx
      w/v58PbdfPrveK19Xp69mPPP+2/cGvx6ty46+ebV2Tx99mqePHk8MzPrnzczd+7O679fz5/3
      781aa87Pz+f09HRmZg6Hww/N+77PycnJT81rrVlrXYt5Zmbbth+e932fbduuxfyzz/OY9+gy
      5m39f8e/Ye2f5vlfz+fBw0fzx53bX1wIrrPvCuBrAuCm8BNMmgBIEwBpAiBNAKQJgDQBkCYA
      0gRAmgBIEwBpAiBNAKQJgDQBkCYA0gRAmgBIEwBpAiBNAKQJgDQBkCYA0gRAmgBIEwBpAiBN
      AKQJgDQBkCYA0gRAmgBIEwBpAiBNAKQJgDQBkCYA0gRAmgBIEwBpAiBNAKQJgDQBkCYA0gRA
      mgBIEwBpAiBNAKQJgDQBkCYA0gRAmgBIEwBpAiBNAKQJgDQBkCYA0gRAmgBIEwBpAiBNAKQJ
      gDQBkCYA0gRAmgBIEwBpAiBNAKQJgDQBkCYA0gRAmgBIEwBpAiBNAKQJgDQBkHbrmEXbts3h
      cLjsvcBvt6211lVvAq6KTyDSBECaAEgTAGkCIE0ApAmANAGQJgDS/gXtNyK2BoGmUQAAAABJ
      RU5ErkJggg==
    </thumbnail>
    <thumbnail height='84' name='Sheet 10' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 13' width='192'>
      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
      ilCChVNaJQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Sheet 14' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 4' width='192'>
      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
      lnrJi7wAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 5' width='192'>
      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
      gg==
    </thumbnail>
    <thumbnail height='192' name='Sheet 6' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 8' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 8 (2)' width='192'>
      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
      yAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Sheet 9' width='192'>
      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
      SURBVAHW2L7IHrA7AAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Summoner CS Count' width='192'>
      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
      uWvTbReU+f8DtZi+hxGueDsAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Uknown' width='192'>
      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
      NdUNAAAAAElFTkSuQmCC
    </thumbnail>
  </thumbnails>
</workbook>
